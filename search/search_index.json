{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"APL Quest \u2013 APL practice problemsAutomatic validation, solutions and walk-throughs","text":"<p>This site allows you to exercise your APL skills using the practice problems from the APL Problem Solving Competition's phase 1.</p> <p>The problems are designed to be solved using a short dfn or tacit function. If you find yourself writing more than a couple of statements in your solution, you can probably find a better way to do it. You can use TryAPL to experiment and develop your solution.</p> <p>Every problem has one or more solutions explained fully in the APL Quest video series. These solutions come from live events that happened in the APL Orchard chat room on Stack Exchange. You will find the relevant walk-through video at the bottom of each problem page, together with links to the chat transcript and solution code on GitHub.</p> <p>Notice something wrong? Report a bug.</p>"},{"location":"2013/","title":"APL Quest 2013 Problems","text":"<p>2013-1: Seems a Bit Odd To Me: Write a function to produce a vector of the first n odd numbers.</p> <p>2013-2: Making The Grade: Write a function which returns the percent (from 0 to 100) of passing (65 or higher) grades in a vector of grades.</p> <p>2013-3: What Is In a Word: Write a function which returns the number of words in the given character scalar or vector.</p> <p>2013-4: Keeping Things In Balance: Write a function which returns a 1 if the opening and closing parentheses in a character vector are balanced, or a zero otherwise.</p> <p>2013-5: Identity Crisis: Write a function which produces an n\u00d7n identity matrix.</p> <p>2013-6: Home On The Range: Write a function which returns the magnitude of the range of a numeric array.</p> <p>2013-7: Float Your Boat: Write a function which selects the floating point (non-integer) numbers from a numeric vector.</p> <p>2013-8: Go Forth And Multiply: Write a function which produces a multiplication table.</p> <p>2013-9: It Is a Moving Experience: Write a function which produces n month moving averages for a year's worth of data.</p> <p>2013-10: Solution Salvation: Write a function which solves a set of linear equations.</p>"},{"location":"2014/","title":"APL Quest 2014 Problems","text":"<p>2014-1: It Is All Right: Write a function that takes the length of the legs of a triangle as its left argument, and the length of the hypotenuse as its right argument and returns 1 if the triangle is a right triangle, 0 otherwise.</p> <p>2014-2: How Tweet It Is: Write a function which takes a character vector and removes the interior vowels from each word.</p> <p>2014-3: Tell a Fib: Write a function that takes an integer right argument and returns that number of terms in the Fibonacci sequence.</p> <p>2014-4: Space The Final Frontier: Write a function that removes extraneous (leading, trailing, and multiple) spaces from a character vector.</p> <p>2014-5: Mirror Mirror: Write a function which returns a 1 if its character vector argument is a palindrome, 0 otherwise.</p> <p>2014-6: Roll The Dice: Write a function that takes an integer vector representing the sides of a number of dice and returns a 2 column matrix of the number of ways each possible total of the dice can be rolled.</p> <p>2014-7: Revolutionary Thinking: Write a function which takes the diameters of the stationary and mobile circles and returns the number of revolutions the mobile must traverse until the tangent points meet again.</p> <p>2014-8: Go The Distance: Write a function that returns the distance between two points in a space of any number of dimensions.</p> <p>2014-9: Going Ballistic: Write a function which calculates the distance (in meters) a projectile travels given an initial velocity in meters per second and a trajectory in degrees.</p> <p>2014-10: Sales Are Up: Write a function that returns the greatest percent month to month increase.</p>"},{"location":"2015/","title":"APL Quest 2015 Problems","text":"<p>2015-1: Nag A Ram: Write a function that takes two character vectors as its left and right arguments and returns `1` if they are anagrams of each other.</p> <p>2015-2: Longest Streak: Write a function that takes a numeric vector and returns the length of the longest streak of positive growth.</p> <p>2015-3: Farey Tale: Write a function that takes an integer right argument and returns a vector of the terms in the Farey sequence of that order.</p> <p>2015-4: PDI - Progressive Dyadic Iota: Write a function that implements progressive dyadic iota.</p> <p>2015-5: He's so mean, he has no standard deviation: Write a function that returns the population standard deviation of its numeric array right argument.</p> <p>2015-6: Hey! This is My Space: Write a function that takes, as each of its right and left arguments, a pair of co-ordinates representing diagonally opposite corners of two rectangles and returns a `1` if the rectangles overlap.</p> <p>2015-7: Just in (Upper) Case: Write a function to perform case-insensitive membership between two arrays.</p> <p>2015-8: Unlucky 13: Write a function to process output and change the 13s to 12.</p> <p>2015-9: I'd Like Mine Scrambled Please: Write a function that takes a character vector word as its argument and returns the word's letters juxtaposed as described above.</p> <p>2015-10: Blaise'ing a Trail: Write a function that takes an integer right argument representing the order of the Pascal's triangle to be created and returns a \"nicely\" formatted character matrix.</p>"},{"location":"2016/","title":"APL Quest 2016 Problems","text":"<p>2016-1: Statistics - Mean: Write a function that takes a numeric array as its right argument and returns the mean (average) of the array.</p> <p>2016-2: Statistics - Median: Write a function that takes a numeric vector as its right argument and returns the median of the array.</p> <p>2016-3: Statistics - Mode: Write a function that takes a numeric vector or scalar as its right argument and returns the mode (that is, the most common value) of the array.</p> <p>2016-4: Just Meshing Around: Write a function that takes vectors as its left and right arguments and returns them \u201cmeshed\u201d into a single vector formed by alternately taking successive elements from each argument.</p> <p>2016-5: You're Unique, Just Like Everyone Else: Write a function that takes a vector as its right argument and returns elements that occur only once in the vector.</p> <p>2016-6: Shorter Ones to the Front: Write a function that takes a vector of vectors as its right argument and returns it sorted by the length of each element.</p> <p>2016-7: 3s and 5s: Write a function that takes a numeric vector and returns all elements that are divisible by 3 or 5.</p> <p>2016-8: Separating Out the Negative: Write a function that takes a numeric vector and returns a two element vector whose first element contains the values less than 0 (zero) in the vector and the second element contains all values greater than or equal to 0.</p> <p>2016-9: Delimited Text: Write a function that takes a character vector as its right argument and one or more characters as its left argument, where those characters are delimiters in the right argument.</p> <p>2016-10: Order Total : Write a function that takes as its right argument a vector of prices and as its left argument a numeric vector that indicates the number ordered and returns the total cost for the order.</p>"},{"location":"2017/","title":"APL Quest 2017 Problems","text":"<p>2017-1: What an Odd Bunch: Write a function that will return the first n odd natural numbers.</p> <p>2017-2: Good Evening: Write a function that takes an integer array and replaces all the odd numbers with the next greater even number.</p> <p>2017-3: Miss Quoted: Write a function that will remove text found between pairs of double quotes.</p> <p>2017-4: Slice(s) of Pie(s): Write a function that calculates and returns the areas of 0 or more pie slices.</p> <p>2017-5: DNA?: Write a function that takes a string representing a nucleotide and returns a `1` if it is a valid DNA string, `0` otherwise.</p> <p>2017-6: k-mers: Write a function that takes a character vector as its right argument and k (the substring length) as its left argument and returns a vector of the k-mers of the original string.</p> <p>2017-7: Counting DNA Nucleotides: Write a function that takes a character vector representing a DNA string and returns 4 integers of the number of occurrences for each of the symbols 'A', 'C', 'G', and 'T' respectively.</p> <p>2017-8: Be the First 1: Write a function that takes a Boolean vector or scalar and \u201cturns off\u201d all the 1s after the first 1.</p> <p>2017-9: Double Trouble: Write a function that takes a character vector or scalar and returns a Boolean vector indicating anywhere an element is followed by an element of the same value.</p> <p>2017-10: Squaring Off: Write a function that will reshape a given array into the smallest square matrix that will contain all the elements of the argument, padding with additional elements if necessary.</p>"},{"location":"2018/","title":"APL Quest 2018 Problems","text":"<p>2018-1: Oh Say Can You See?: Write a function that, given a scalar or vector of skyscraper heights from closest to furthest, will return an integer representing the number of skyscrapers that can be seen.</p> <p>2018-2: Number Splitting: Write a function that, given a scalar real non-negative number, will return a two-element vector of the integer and fractional parts   of the number.</p> <p>2018-3: Rolling Along: Write a function that, given an integer scalar or vector representing the number of sides on each of a set of dice, will return a histogram showing the distribution curve for the possible totals that can be rolled using those dice.</p> <p>2018-4: What's Your Sign?: Write a function that, given a scalar integer year, returns a character vector (string) of the Chinese zodiac sign for that year.</p> <p>2018-5: What's Your Sign? Revisited: Write a function that, given a 2-element integer vector representing month and day, returns a character vector (string) of the corresponding Western zodiac sign.</p> <p>2018-6: What's Your Angle?: Write a function that, given a character scalar or vector representing some XML, returns 1 if the angle brackets are properly balanced and 0 if not.</p> <p>2018-7: Unconditionally Shifty: Write a function that given a right argument of a Boolean scalar or vector, and left argument scalar integer of the shift amount, returns an appropriately shifted transformation of the right argument.</p> <p>2018-8: Making a Good Argument: Write a function that given a right argument `Y` of any array and a numeric scalar or vector left argument `X` returns a Boolean indicating if the left argument is a valid argument for `X\u2349Y`, like the result of `{0::0 \u22c4 1\u22a3\u237a\u2349\u2375}` but does not use `\u2349` (to test the arguments).</p> <p>2018-9: Earlier, Later, or the Same?: Write a function that given left and right arguments of such timestamps returns a `\u00af1`, `1`, or `0` if the left argument represents a time that is respectively, earlier than, later than, or simultaneous with the right argument.</p> <p>2018-10: Anagrammatically Correct: Write a function that takes left and right arguments of character scalars or vectors returns a `1` if the arguments are anagrams of one another, `0` otherwise.</p>"},{"location":"2019/","title":"APL Quest 2019 Problems","text":"<p>2019-1: Chunky Monkey: Write a function that, given a scalar or vector as the right argument and a positive (&gt;0) integer chunk size `n` as the left argument, breaks the array's items up into chunks of size `n`.</p> <p>2019-2: Making the Grade: Write a function that, given an array of integer test scores in the inclusive range 0\u2013100, returns an identically-shaped array of the corresponding letter grades.</p> <p>2019-3: Grade Distribution: Write a function that produces a 3-column, 5-row, alphabetically-sorted matrix of each grade, the number of occurrences of that grade, and the percentage (rounded to 1 decimal position) of the total number of occurrences of that grade.</p> <p>2019-4: Knight Moves: Write a function that, given a 2-element vector representing the current square for a knight, returns a vector of 2-element vectors representing (in any order) all the squares that the knight can move to.</p> <p>2019-5: Doubling Up: Write a function that, given a word or a list of words, returns a Boolean vector where `1` indicates a word with one or more consecutive duplicated, case-sensitive, letters.</p> <p>2019-6: Telephone Names: Write a function that takes a character vector right argument that consists of digits and uppercase letters and returns an integer vector of the corresponding digits on the keypad.</p> <p>2019-7: In the Center of It All: Write a function that, given a right argument of a list of words (or possibly a single word) and a left argument of a width, returns a character matrix that has width columns and one row per word, where each word is centered within the row.</p> <p>2019-8: Going the Distance: Write a function that, given a right argument of a list of words (or possibly a single word) and a left argument of a width, returns a character matrix that has width columns and one row per word, where each word is centered within the row.</p> <p>2019-9: Area Code \u00e0 la Gauss: Write a function that, given a vector of (X Y) points, or a single X Y point, returns a number indicating the area circumscribed by the points.</p> <p>2019-10: Odds &amp; Evens: Write a function that, given a vector of words, separates the words into two vectors \u2013 one containing all the words that have an odd number of letters and the other containing all the words that have an even number of letters.</p>"},{"location":"2020/","title":"APL Quest 2020 Problems","text":"<p>2020-1: Let's Split!: Write a function that, given a right argument `Y` which is a scalar or a non-empty vector and a left argument `X` which is a single non-zero integer so that its absolute value is less or equal to `\u2262Y`, splits `Y` into a vector of two vectors according to `X`.</p> <p>2020-2: Character Building: Write a function that, given a right argument which is a simple integer vector representing valid UTF-8 text, encloses each sequence of integers that represent a single character, like the result of `'UTF-8'\u2218\u2395UCS\u00a8'UTF-8'\u2218\u2395UCS` but does not use any system functions (names beginning with `\u2395`).</p> <p>2020-3: Excel-lent Columns: Write a function that, given a right argument which is a character scalar or non-empty vector representing a valid character Excel column identifier between A and XFD, returns the corresponding column number.</p> <p>2020-4: Take a Leap: Write a function that, given a right argument which is an integer array of year numbers greater than or equal to 1752 and less than 4000, returns a result of the same shape as the right argument where 1 indicates that the corresponding year is a leap year (0 otherwise).</p> <p>2020-5: Stepping in the Proper Direction: Write a function that, given a right argument of 2 integers, returns a vector of the integers from the first element of the right argument to the second, inclusively.</p> <p>2020-6: Move to the Front: Write a function that, given a right argument which is an integer vector and a left argument which is an integer scalar, reorders the right argument so any elements equal to the left argument come first while all other elements keep their order.</p> <p>2020-7: See You in a Bit: Write a function that, given a non-negative right argument which is an integer scalar representing the encoded state and a left argument which is an integer scalar representing the encoded state settings that you want to query, returns 1 if all of the codes in the left argument are found in the right argument (0 otherwise).</p> <p>2020-8: Zigzag Numbers: Write a function that takes a single integer greater than or equal to 100 and less than 10\u00b9\u2075 as its right argument and returns a 1 if the integer is a zigzag number, 0 otherwise.</p> <p>2020-9: Rise and Fall: Write a function that, given a right argument which is an integer scalar or vector, returns a 1 if the values of the right argument conform to the given pattern (0 otherwise).</p> <p>2020-10: Stacking It Up: Write a function that takes as its right argument a vector of simple arrays of rank 2 or less (scalar, vector, or matrix) and returns a simple character array that displays identically to what `{\u2395\u2190\u2375}\u00a8` displays when applied to the right argument.</p>"},{"location":"2021/","title":"APL Quest 2021 Problems","text":"<p>2021-1: Are You a Bacteria?: Write a function that has a right argument that is a non-empty character vector representing a DNA string and returns the percentage of GC-content in the string.</p> <p>2021-2: Index-Of Modified: Write a function that behaves like the APL index-of function `R\u2190X\u2373Y` except that it returns `0` instead of `1+\u2262X` for elements of `Y` not found in `X`.</p> <p>2021-3: Multiplicity: Write a function that finds which elements of <code>Y</code> are multiples of each element of <code>X</code> and returns them as a vector (in the order of <code>X</code>) of vectors (in the order of <code>Y</code>).</p> <p>2021-4: Square Peg, Round Hole: Write a function which returns a numeric array of the same shape as the right argument representing the difference between the areas of the circles and the areas of the largest squares that can be inscribed within each circle.</p> <p>2021-5: Rect-ify: Write a function that has a right argument which is a positive integer less than or equal to 1,000,000 and returns a 2-element integer vector representing the rows and columns of the most square rectangle such that the number product of the number of rows and columns equals the argument.</p> <p>2021-6: Fischer Random Chess: Write a function that as a character vector right argument that is a permutation of 'KQRRBBNN' and returns 1 if the K is between the two Rs and the Bs occupy one odd and one even position; and otherwise returns a 0.</p> <p>2021-7: Can You Feel the Magic?: Write a function to test whether an array is a magic square.</p> <p>2021-8: Time to Make a Difference: Write a function that returns the number of minutes between two timestamps.</p> <p>2021-9: In the Long Run: Write a function that returns an integer singleton that represents the highest number of consecutive days where the price increased, decreased, or remained the same, relative to the previous day.</p> <p>2021-10: On the Right Side: Write a function that returns a right-aligned character array with restricted width.</p>"},{"location":"2022/","title":"APL Quest 2022 Problems","text":"<p>2022-1: Counting DNA Nucleotides?: Write a function that takes a right argument that is a character vector or scalar representing a DNA string (whose alphabet contains the symbols 'A', 'C', 'G', and 'T') and returns a 4-element numeric vector containing the counts of each symbol 'A', 'C', 'G', and 'T' respectively.</p> <p>2022-2: Attack of the Mutations!: Write a function that takes right and left arguments that are character vectors or scalars of equal length \u2013 these represent DNA strings \u2013 and returns an integer representing the Hamming distance (the number of differences in corresponding positions) between the arguments.</p> <p>2022-3: Uniquely Qualified: Write a function that takes right and left arguments that are arrays of arbitrary rank, depth, and value, and returns a vector of all elements that appear in either of the two argument arrays but not in both.</p> <p>2022-4: In the Long One...: Write a function that takes a right argument that is a Boolean scalar or vector and returns the length of the longest sequence of consecutive 1s.</p> <p>2022-5: Stairway to Heaven: Write a function that takes a scalar integer argument and returns a character matrix comprised of spaces and <code>\u2395</code> that resembles a left-to-right ascending stairway.</p> <p>2022-6: Pyramid Scheme: Write a monadic function that takes an argument n that is an integer scalar in the range 0-100 and returns a square matrix \"pyramid\" with 0\u2308\u00af1+2\u00d7n rows and columns of n increasing concentric levels.</p> <p>2022-7: Just Golfing Around: Write a function that takes a right argument that is a non-decreasing vector or scalar of strictly positive integers, representing a set of scores and returns a numeric vector of the place for each score; for duplicate scores, it returns the average of the places they hold.</p> <p>2022-8: Let's Split!: Write a function that takes non-empty character vector or scalar arguments and returns a 2-element vector of character vectors in which the right argument is split immediately before the first occurence of any element in the left argument.</p> <p>2022-9: An Average Window (or a Windowed Average): Write a function that takes a right argument that is a numeric scalar or non-empty vector and takes a left argument X that represents the number of neighboring elements on either side of each element in Y and returns a numeric vector or scalar where each element is the average (mean) of the corresponding element in Y and its X neighbors on either side.</p> <p>2022-10: Separation Anxiety: Write a function that takes a right argument that is a character vector or scalar representing a valid non-negative integer and a left argument that is a character scalar \"separator\" character and returns a character vector that is a representation of the right argument formatted such that the separator character is found between trailing groups of 3 digits.</p>"},{"location":"2023/","title":"APL Quest 2023 Problems","text":"<p>2023-1: Elimination Sort: Write a function that takes a non-empty numeric vector right argument and returns an \"Elimination-sorted\" vector of the right argument.</p> <p>2023-2: Put It In Reverse: Write a function that takes takes a scalar or vector arguments and returns a Boolean result that is the same shape as the right argument where 1's mark the ends of occurrences of the left argument in the right argument.</p> <p>2023-3: Caesar Salad: Write a function that takes a single integer left argument representing the size of the shift and takes a character vector right argument representing the plaintext message and returns a result with the same shape as the right argument representing the encrypted message.</p> <p>2023-4: Like a Version: Write a function that compares two 3-element integer vectors representing major versions, minor versions, and build numbers.</p> <p>2023-5: Risky Business: Write a function that takes non-empty, descending integer vectors representing the attacker's and defender's dice rolls and returns a 2-element vector where the first element represents the number of armies the attacker lost and the second element represents the number of armies the defender lost.</p> <p>2023-6: Key/Value Pairs: Write a function that takes a 2-element character vector left argument where the first element represents the separator character between multiple key/value pairs and the second element represents the separator between the key and the value for each pair and takes a character vector right argument representing a valid set of key/value pairs (delimited as specified by the left argument) and returns a 2-column matrix where the first column contains the character vector keys of the key/value pairs and the second column contains the character vector values.</p> <p>2023-7: Let's Be Rational: Write a function that takes a single non-zero positive number right argument and returns a 2-element \"integer\" result representing the smallest non-zero positive values for p and q respectively.</p> <p>2023-8: Critical Thinking: Write a function that takes a 3-element integer left argument representing a valid birthdate and 3-element integer right argument representing a valid date occurring on or after the left argument and returns a 3-element integer array representing the date of the next double or triple critical day occurring on or after the date represented by the right argument.</p> <p>2023-9: Flipping Pairs: Write a function that takes a non-empty non-scalar array right argument and returns an array of the same shape as the argument, but with pairs of elements along the last axis \"flipped\".</p> <p>2023-10: Partition with a Twist: Write a function that takes a non-negative integer and a space-delimited character vector and splits the character vector into the given number of sub-strings.</p>"},{"location":"how-to/","title":"How to solve the problems","text":"<p>The problems are designed to be solved using a short dfn or tacit functions. If you find yourself writing more than a couple of statements in your solution, you can probably find a better way to do it.</p> <p>Your code must run in a default Dyalog environment using <code>(\u2395ML \u2395IO)\u21901</code>. If you use other settings for <code>\u2395ML</code> or <code>\u2395IO</code>, they must be local. If you don't know what that means, don't worry, it won't matter to you.</p>"},{"location":"how-to/#boxed-display","title":"Boxed display","text":"<p>Some of the examples use \"boxed display\" to make the structure of the returned results clearer. Boxing is always enabled on TryAPL and can be enabled in your local APL Session with the <code>]Box</code> user command:</p> <pre><code>      \u2373\u00a8\u23734\n 1  1 2  1 2 3  1 2 3 4 \n      ]Box on\nWas OFF\n      \u2373\u00a8\u23734\n\u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25021 2\u25021 2 3\u25021 2 3 4\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"sample/","title":"Sample Problem: Counting Vowels","text":"<p>This is a walk-through sample problem showing how to use the site.</p> <p>Each problem has a description and one or more examples. Wherever you see <code>(your_function)</code> is where you should insert your solution (either a dfn or tacit function). The problem description for this sample problem is:</p> <p>Write an APL function to count the number of vowels (A, E, I, O, U) in an array consisting of uppercase letters (A\u2013Z).</p> <p>Some task descriptions include a hint suggesting one or more APL primitives:</p> <p>\ud83d\udca1 Hint: The membership function <code>X\u220aY</code> could be helpful for this problem.</p> <p>These may be helpful in solving the problem, but you don\u2019t have to use them. Clicking on a primitive in the hint opens its documentation page.</p> <p>Each problem ends with some example cases:</p>"},{"location":"sample/#examples","title":"Examples:","text":"<p>The symbol <code>\u235d</code> is the APL comment symbol. In some of the examples, we provide comments to give you more information about the problem:</p> <pre><code>      (your_function) 'COOLAPL'\n3\n      (your_function) ''          \u235d empty argument\n0\n      (your_function) 'NVWLSHR'   \u235d no vowels here\n0\n</code></pre> <p>You can use these as a basis for implementing your solution.</p> <p>Some of the examples use \"boxed display\" to make the structure of the returned results clearer. Boxing is always enabled on TryAPL and can be enabled in your local APL Session with the <code>]Box</code> user command:</p> <pre><code>      \u2373\u00a8\u23734\n 1  1 2  1 2 3  1 2 3 4 \n      ]Box on\nWas OFF\n      \u2373\u00a8\u23734\n\u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25021 2\u25021 2 3\u25021 2 3 4\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Your code must run in a default Dyalog environment using <code>(\u2395ML \u2395IO)\u21901</code>. If you use other settings for <code>\u2395ML</code> or <code>\u2395IO</code>, they must be local. If you don't know what that means, don't worry, it won't matter to you.</p>  Here are a dfn and a tacit solution:   <pre><code>      {+/\u2375\u220a'AEIOU'} 'COOLAPL'   \u235d dfn\n3\n      (+/\u220a\u2218'AEIOU') 'COOLAPL'     \u235d tacit function\n3\n</code></pre> <p>If you enter one of the above functions into the input field below and click \u2714 Test, you'll see that they only pass the basic test cases. This is because they don\u2019t handle arrays with 2 or more dimensions. The system will also give you an example of a multi-dimensional edge case that failed, so that you can attempt to improve your solution.</p> <code>your_function \u2190 </code> \u2714 Test <p></p> <p>Try entering <code>{+/,\u2375\u220a'AEIOU'}</code> which handles all test cases.</p>"},{"location":"2013/1/","title":"2013-1: Seems a Bit Odd To Me","text":"<p>Write a function to produce a vector of the first n odd numbers.</p>"},{"location":"2013/1/#examples","title":"Examples:","text":"<pre><code>      (your_function) 10\n1 3 5 7 9 11 13 15 17 19\n      (your_function) 1\n1\n      (your_function) 0 \u235d this should return an empty vector\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/1/#solutions","title":"Solutions","text":"10:31 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/10/","title":"2013-10: Solution Salvation","text":"<p>Many people have taken some sort of algebra class where you are presented with a set of linear equations like:</p> <p>3x + 2y = 13 x - y = 1</p> <p>The answer in this case is x=3 and y=2</p> <p>Write a function which solves this type of problem. Hint: this is the easiest of all of the problems presented here.</p> <p>The left argument is a vector of the values for the equations and the right argument is a matrix of the coefficients.</p>"},{"location":"2013/10/#examples","title":"Examples:","text":"<pre><code>      13 1 (your_function) 2 2\u23743 2 1 \u00af1\n3 2\n      2 6 4 (your_function) 3 3\u23744 1 3 2 2 2 6 3 1\n\u00af1 3 1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/10/#solutions","title":"Solutions","text":"24:01 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/2/","title":"2013-2: Making The Grade","text":"<p>Write a function which returns the percent (from 0 to 100) of passing (65 or higher) grades in a vector of grades.</p>"},{"location":"2013/2/#examples","title":"Examples:","text":"<pre><code>      (your_function) 25 90 100 64 65\n60\n      (your_function) 50\n0\n      (your_function) 80 90 100\n100\n      (your_function) \u23730 \u235d all grades in an empty vector are passing\n100\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/2/#solutions","title":"Solutions","text":"15:03 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/3/","title":"2013-3: What Is In a Word","text":"<p>Write a function which returns the number of words in the given character scalar or vector.</p> <p>For simplicity's sake, you can consider the space character <code>' '</code> to be the only word separator.</p>"},{"location":"2013/3/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'Testing one, two, three'\n4\n      (your_function) '' \u235d empty vector has no words\n0\n      (your_function) ' this vector has extra blanks ' \u235d just counting the blanks won't work\n5\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/3/#solutions","title":"Solutions","text":"21:18 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/4/","title":"2013-4: Keeping Things In Balance","text":"<p>Write a function which returns a 1 if the opening and closing parentheses in a character vector are balanced, or a zero otherwise.</p>"},{"location":"2013/4/#examples","title":"Examples:","text":"<pre><code>      (your_function) '((2\u00d73)+4)'\n1\n      (your_function) ''\n1\n      (your_function) 'hello world!'\n1\n      (your_function) ')(2\u00d73)+4('\n0\n      (your_function) '(()'\n0\n      (your_function) ')'\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/4/#solutions","title":"Solutions","text":"34:35 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/5/","title":"2013-5: Identity Crisis","text":"<p>An identity matrix is a square matrix (table) of 0 with 1's in the main diagonal.</p> <p>Write a function which produces an n\u00d7n identity matrix.</p>"},{"location":"2013/5/#examples","title":"Examples:","text":"<pre><code>      (your_function) 5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n      (your_function) 1 \u235d should return a 1\u00d71 matrix\n1\n      (your_function) 0 \u235d should return a 0\u00d70 matrix\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/5/#solutions","title":"Solutions","text":"25:05 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/6/","title":"APL Quest 2013-6: Home On The Range","text":""},{"location":"2013/6/#2013-6-home-on-the-range","title":"2013-6: Home On The Range","text":"<p>Write a function which returns the magnitude of the range (i.e. the difference between the lowest and highest values) of a numeric array.</p>"},{"location":"2013/6/#examples","title":"Examples:","text":"<pre><code>      (your_function) 19 \u00af3 7.6 22\n25\n      (your_function) 101 \u235d should work with a scalar argument\n0\n      (your_function) 2 3\u237410 20 30 40 50 60 \u235d should work with arrays of any number of dimensions\n50\n      (your_function) \u23730 \u235d including empty arrays\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/6/#solutions","title":"Solutions","text":"19:48 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/7/","title":"2013-7: Float Your Boat","text":"<p>Write a function which selects the floating point (non-integer) numbers from a numeric vector.</p>"},{"location":"2013/7/#examples","title":"Examples:","text":"<pre><code>      (your_function) 14.2 9 \u00af3 3.1 0 \u00af1.1\n14.2 3.1 \u00af1.1\n      (your_function) 1 3 5 \u235d should return an empty vector\n\n      (your_function) 3.1415\n3.1415\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/7/#solutions","title":"Solutions","text":"22:50 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/8/","title":"2013-8: Go Forth And Multiply","text":"<p>Write a function which produces a multiplication table.</p>"},{"location":"2013/8/#examples","title":"Examples:","text":"<pre><code>      (your_function) 5\n1 2  3  4  5\n2 4  6  8  10\n3 6  9  12 15\n4 8  12 16 20\n5 10 15 20 25\n      (your_function) 1 \u235d should return a 1\u00d71 matrix\n1\n      (your_function) 0 \u235d should return a 0\u00d70 matrix\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/8/#solutions","title":"Solutions","text":"19:42 <p>Chat transcript Code on GitHub</p>"},{"location":"2013/9/","title":"2013-9: It Is a Moving Experience","text":"<p>Write a function which produces n month moving averages for a year's worth of data.</p>"},{"location":"2013/9/#examples","title":"Examples:","text":"<pre><code>      sales\u2190200 300 2700 3400 100 2000 400 2100 3500 3000 4700 4300\n\n      2 (your_function) sales \u235d produces 2 month moving averages\n250 1500 3050 1750 1050 1200 1250 2800 3250 3850 4500\n      10 (your_function) sales \u235d 10 month moving average\n1770 2220 2620\n      1 (your_function) sales \u235d 1 month moving average is the same as sales\n200 300 2700 3400 100 2000 400 2100 3500 3000 4700 4300\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2013/9/#solutions","title":"Solutions","text":"15:12 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/1/","title":"2014-1: It Is All Right","text":"<p>Write a function that takes the length of the legs of a triangle as its left argument, and the length of the hypotenuse as its right argument and returns 1 if the triangle is a right triangle, 0 otherwise.</p>"},{"location":"2014/1/#examples","title":"Examples:","text":"<pre><code>      3 4 (your_function) 5\n1\n      2 3 (your_function) 4\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/1/#solutions","title":"Solutions","text":"18:13 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/10/","title":"2014-10: Sales Are Up","text":"<p>Given a vector representing monthly sales figures, write a function that returns the greatest percent month to month increase.</p>"},{"location":"2014/10/#examples","title":"Examples:","text":"<pre><code>      (your_function) 80 100 120 140\n25\n      (your_function) 123 123 123\n0\n      (your_function) 101 102 114 117 101 110 102 111 118 115 124 122\n11.76470588\n      (your_function) 200 180 160 140 120\n\u00af10\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/10/#solutions","title":"Solutions","text":"10:59 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/2/","title":"2014-2: How Tweet It Is","text":"<p>Twitter messages have a 140 character limit; what if the limit was even shorter? One way to shorten the message yet retain most readability is to remove interior vowels from its words. Write a function which takes a character vector and removes the interior vowels from each word.</p>"},{"location":"2014/2/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'if you can read this, it worked!'\nif yu cn rd ths, it wrkd!\n      (your_function) 'APL is REALLY cool'\nAPL is RLLY cl\n      (your_function) '' \u235d an empty vector arg should return an empty vector\n\n      (your_function) 'a' \u235d should work with a single character message\na\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/2/#solutions","title":"Solutions","text":"29:50 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/3/","title":"2014-3: Tell a Fib","text":"<p>Write a function that takes an integer right argument and returns that number of terms in the Fibonacci sequence.</p>"},{"location":"2014/3/#examples","title":"Examples:","text":"<pre><code>      (your_function) 10\n1 1 2 3 5 8 13 21 34 55\n      (your_function) 1\n1\n      (your_function) 0 \u235d should return an empty vector\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/3/#solutions","title":"Solutions","text":"30:45 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/4/","title":"2014-4: Space The Final Frontier","text":"<p>Write a function that removes extraneous (leading, trailing, and multiple) spaces from a character vector.</p>"},{"location":"2014/4/#examples","title":"Examples:","text":"<pre><code>      (your_function) '  this  is a   test  '\nthis is a test\n       (your_function) '' \u235d should return an empty vector\n\n       (your_function) 'hello world!'\nhello world!\n       (your_function) '  ' \u235d vector of only spaces should return empty vector\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/4/#solutions","title":"Solutions","text":"52:55 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/5/","title":"2014-5: Mirror Mirror","text":"<p>A palindrome is a word or phrase whose letters read the same forwards and backwards. Write a function which returns a 1 if its character vector argument is a palindrome, 0 otherwise. For simplicity's sake, you may assume that the vector is all one case.</p>"},{"location":"2014/5/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'a man, a plan, a canal, panama!'\n1\n      (your_function) '' \u235d a phrase of 0 length is a palindrome\n1\n      (your_function) 'a' \u235d as is a single letter phrase\n1\n      (your_function) 'APL' \u235d APL may be cool, but it's not a palindrome\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/5/#solutions","title":"Solutions","text":"16:31 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/6/","title":"2014-6: Roll The Dice","text":"<p>Write a function that takes an integer vector representing the sides of a number of dice and returns a 2 column matrix of the number of ways each possible total of the dice can be rolled.</p>"},{"location":"2014/6/#examples","title":"Examples:","text":"<pre><code>      (your_function) 6 6 \u235d 2 six-sided dice\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 5\n9 4\n10 3\n11 2\n12 1\n      (your_function) 6 4 \u235d a six-sided and a four-sided die\n2 1\n3 2\n4 3\n5 4\n6 4\n7 4\n8 3\n9 2\n10 1\n      (your_function) 3 \u235d a single 3-sided die\n1 1\n2 1\n3 1\n      (your_function) \u236c \u235d no dice\n0 1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/6/#solutions","title":"Solutions","text":"10:55 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/7/","title":"2014-7: Revolutionary Thinking","text":"<p>Imagine there are two circles that are tangent to one another. One circle is stationary, the other can \"roll\" around the stationary circle.</p> <p>Write a function which takes the diameters of the stationary and mobile circles and returns the number of revolutions the mobile must traverse until the tangent points meet again.</p>"},{"location":"2014/7/#examples","title":"Examples:","text":"<pre><code>      10 (your_function) 10 \u235d identically sized circles\n1\n      10 (your_function) 5 \u235d a mobile circle that's half the size needs to make 2 revolutions\n2\n      5 (your_function) 7 \u235d a mobile circle of diameter 7 needs to make 5 revolutions around a stationary circle of diameter 5\n5\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/7/#solutions","title":"Solutions","text":"15:56 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/8/","title":"2014-8: Go The Distance","text":"<p>Write a function that returns the distance between two points in a space of any number of dimensions.</p>"},{"location":"2014/8/#examples","title":"Examples:","text":"<pre><code>      2 (your_function) 5 \u235d one-dimensional space\n3\n      2 2 (your_function) 5 6 \u235d two-dimensional space\n5\n      \u236c (your_function) \u236c \u235d zero dimension space\n0\n      2 2 3 4 (your_function) 3 7 10 9 \u235d four-dimensions\n10\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/8/#solutions","title":"Solutions","text":"7:59 <p>Chat transcript Code on GitHub</p>"},{"location":"2014/9/","title":"2014-9: Going Ballistic","text":"<p>The following formula gives the horizontal distance a projectile travels:</p> <p>Where: v is the initial velocity, \u03b8 is the trajectory in degrees, d is the horizontal distance and G is the gravitational constant.</p> <p>Write a function which calculates the distance (in meters) a projectile travels given an initial velocity in meters per second and a trajectory in degrees. Use 9.8 meters per second squared as the gravitational constant.</p>"},{"location":"2014/9/#examples","title":"Examples:","text":"<pre><code>      100 (your_function) 45 \u235d 100 meters per second and 45 degree trajectory\n1020.408163\n      0 (your_function) 45 \u235d no velocity = no distance\n0\n      100 (your_function) 90 \u235d shooting straight up = no distance\n1.249639591E\u00af13\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2014/9/#solutions","title":"Solutions","text":"8:27 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/1/","title":"2015-1: Nag A Ram","text":"<p>Write a function that takes two character vectors as its left and right arguments and returns <code>1</code> if they are anagrams of each other. An anagram of a string uses all of the letters of the string ignoring word spacing, capitalisation, and punctuation.</p>"},{"location":"2015/1/#examples","title":"Examples:","text":"<pre><code>      'anagram' (your_function) 'Nag A Ram' \n1\n      'Dyalog APL' (your_function) 'Dog Pay All' \n1\n      '' (your_function) '  !#!' \n1\n      'abcde' (your_function) 'zyxwvu'\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/1/#solutions","title":"Solutions","text":"16:22 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/10/","title":"2015-10: Blaise'ing a Trail","text":"<p>The APL expression to compute Pascal's triangle of order <code>n</code> is fairly simple.</p> <pre><code>      {{\u2349\u2375\u2218.!\u2375}0,\u2373\u2375} 10\n1  0  0   0   0   0   0   0  0  0 0\n1  1  0   0   0   0   0   0  0  0 0\n1  2  1   0   0   0   0   0  0  0 0\n1  3  3   1   0   0   0   0  0  0 0\n1  4  6   4   1   0   0   0  0  0 0\n1  5 10  10   5   1   0   0  0  0 0\n1  6 15  20  15   6   1   0  0  0 0\n1  7 21  35  35  21   7   1  0  0 0\n1  8 28  56  70  56  28   8  1  0 0\n1  9 36  84 126 126  84  36  9  1 0\n1 10 45 120 210 252 210 120 45 10 1\n</code></pre> <p>However, the output leaves something to be desired. Write a function that takes an integer right argument representing the order of the Pascal's triangle to be created and returns a \"nicely\" formatted character matrix.  Because we're using a mono-spaced font and can only format whole character positions, lines do not have to be perfectly centered and may vary by a character position.</p>"},{"location":"2015/10/#examples","title":"Examples:","text":"<pre><code>     (your_function) 10 \n                 1                     \n                1 1           \n               1 2 1                   \n              1 3 3 1        \n             1 4 6 4 1    \n           1 5 10 10 5 1        \n         1 6 15 20 15 6 1               \n        1 7 21 35 35 21 7 1          \n      1 8 28 56 70 56 28 8 1        \n    1 9 36 84 126 126 84 36 9 1     \n1 10 45 120 210 252 210 120 45 10 1\n     (your_function) 1\n 1 \n1 1\n     (your_function) 0 \n1 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/10/#solutions","title":"Solutions","text":"16:46 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/2/","title":"2015-2: Longest Streak","text":"<p>Write a function that takes a numeric vector and returns the length of the longest streak of positive growth. </p>"},{"location":"2015/2/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5 6 7 8 9 \n8\n     (your_function) 1 \n0\n     (your_function) 9 8 7 6 5 4\n0\n     (your_function) 1 5 3 4 2 6 7 8\n3\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/2/#solutions","title":"Solutions","text":"14:49 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/3/","title":"2015-3: Farey Tale","text":"<p>In mathematics, the Farey_sequence of order n is the sequence of completely reduced fractions between 0 and 1 which, when in lowest terms, have denominators less than or equal to n, arranged in order of increasing size. Each Farey sequence starts with the value 0, denoted by the fraction 0\u20441, and ends with the value 1, denoted by the fraction 1\u20441.</p> <p>Write a function that takes an integer right argument and returns a vector of the terms in the Farey sequence of that order. Each element in the returned vector is itself a 2-element vector of numerator and denominator for the corresponding term.</p>"},{"location":"2015/3/#examples","title":"Examples:","text":"<pre><code>     (your_function) 0 \n\u250c\u2500\u2500\u2500\u2510\n\u25020 1\u2502\n\u2514\u2500\u2500\u2500\u2518\n     (your_function) 1\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25020 1\u25021 1\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n     (your_function) 5\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25020 1\u25021 5\u25021 4\u25021 3\u25022 5\u25021 2\u25023 5\u25022 3\u25023 4\u25024 5\u25021 1\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/3/#solutions","title":"Solutions","text":"31:35 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/4/","title":"2015-4: PDI - Progressive Dyadic Iota","text":"<p>The index-of function <code>X\u2373Y</code> returns a simple integer vector that identifies where the major cells of <code>Y</code> are first found in <code>X</code>. If a major cell of <code>Y</code> cannot be found in <code>X</code>, then the corresponding item of the returned array will be <code>1+\u2262X</code>.</p> <p>Example of <code>X\u2373Y</code>:  </p> <pre><code>      'DYALOG APL' \u2373 'AAALLLB' \n3 3 3 4 4 4 11\n</code></pre> <p>Progressive dyadic iota is similar to <code>\u2373</code> except that it returns the index of subsequent matches in the left argument until they are exhausted. Write a function that implements progressive dyadic iota.</p>"},{"location":"2015/4/#examples","title":"Examples:","text":"<pre><code>      'DYALOG APL' (your_function) 'AAALLLB' \n3 8 11 4 10 11 11\n      '' (your_function) 'test'  \u235d should work with empty left argument \n1 1 1 1 \n      \u236c\u2261'test' (your_function) ''  \u235d should work with empty right argument\n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/4/#solutions","title":"Solutions","text":"35:10 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/5/","title":"2015-5: He's so mean, he has no standard deviation","text":"<p>The standard deviation of a population is calculated by taking the square root of the average of the squared differences of the values from their average value. The mathematical formula is:</p> <p>where x\u0304 is the mean average value and n is the number of values.</p> <p>Write a function that returns the population standard deviation of its numeric array right argument.</p>"},{"location":"2015/5/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5\n1.414213562\n     (your_function) 10 10\u2374\u2373100  \u235d and higher dimensions as well\n28.86607005\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/5/#solutions","title":"Solutions","text":"7:47 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/6/","title":"2015-6: Hey! This is My Space","text":"<p>Write a function that takes, as each of its right and left arguments, a pair of co-ordinates representing diagonally opposite corners of two rectangles and returns a <code>1</code> if the rectangles overlap. The co-ordinates could be either (upper-left, lower-right) or (upper-right, lower left).</p>"},{"location":"2015/6/#examples","title":"Examples:","text":"<pre><code>      (1 1)(5 5) (your_function) (3 3)(7 7)\n1\n      (1 1)(5 5) (your_function) (5 5)(1 1)\n1\n      (1 1)(3 3) (your_function) (4 4)(7 7)\n0\n      (1.1 1.1)(5.5 5.5) (your_function) (3.3 3.3)(4.4 4.4)\n1 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/6/#solutions","title":"Solutions","text":"24:00 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/7/","title":"2015-7: Just in (Upper) Case","text":"<p>Membership <code>X\u220aY</code> returns a boolean array of shape <code>\u2374X</code> with <code>1</code>s indicating where elements of <code>Y</code> occur in <code>X</code>. For a vector <code>X</code> this results in a very convenient boolean mask.</p> <p>In many instances, it is desirable to perform case-insensitive comparisons and operations. Write a function to perform case-insensitive membership between two arrays.</p> <p>For full marks, consider membership of cells in high-rank arrays, your function should still return a vector when comparing cells of the same rank, for example (<code>3 2\u2374\u2395A</code>) and (<code>1 2\u2374'cd'</code>).</p>"},{"location":"2015/7/#examples","title":"Examples:","text":"<pre><code>      'dyalog' (your_function) 'APL'\n0 0 1 1 0 0\n      'bramley' (your_function) 'HAMPSHIRE'\n0 1 1 1 0 1 0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/7/#solutions","title":"Solutions","text":"5:50 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/8/","title":"2015-8: Unlucky 13","text":"<p>You've just been hired by a new company and you've learned that the owner has triskaidekaphobia (fear of the number 13). As such he's issued a corporate mandate that no output from any program shall include the number 13 \u2013 12.99 will be used instead. Your boss wants you to implement a function to process output and change the 13s to 12.99. For now, you need only concern yourself with numeric data and not worry about 13s that are formatted in text.</p>"},{"location":"2015/8/#examples","title":"Examples:","text":"<pre><code>     (your_function) 13\n12.99\n     (your_function) \u237315 \n1 2 3 4 5 6 7 8 9 10 11 12 12.99 14 15\n     (your_function) 6+5 6 7 8 9\n11 12 12.99 14 15\n     (your_function) 13 130 13.13 1300  \u235d we only care about the number 13\n12.99 130 13.13 1300\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/8/#solutions","title":"Solutions","text":"13:47 <p>Chat transcript Code on GitHub</p>"},{"location":"2015/9/","title":"2015-9: I'd Like Mine Scrambled Please","text":"<p>There is an urban myth about some research that was supposedly done at Cambridge University that purports changing the order of the interior letters in the words of a sentence does not significantly hamper the readability of the sentence. </p> <p>Put another way... Teher is an ubran mtyh aobut smoe rseaecrh taht was spuopesldy dnoe at Cmarbdige Uinevsrtiy taht pruoptrs cahgnnig the odrer of the itnreoir lteetrs in the wrods of a sneetcne deos not sgiinifactnly hmaepr the raeadibilty of the sneetcne.  </p> <p>In the above example, for words that contain more than 3 letters, the first and last letters remain the same while all of the interior letters are transposed in groups of two, ignoring punctuation. If there are an odd number of letters in the interior of the word, then the last letter is left as it is. </p> <p>Write a function that takes a character vector word as its argument and returns the word's letters juxtaposed as described above.</p>"},{"location":"2015/9/#examples","title":"Examples:","text":"<pre><code>     (your_function) 'argument'\nagrmunet\n      ]box on\n      your_function\u00a8'this' 'is' 'awesome'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502tihs\u2502is\u2502aewosme\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      ]box off \n      your_function\u00a8'this' 'is' 'awesome'\n tihs  is  aewosme \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2015/9/#solutions","title":"Solutions","text":"23:31 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/1/","title":"2016-1: Statistics - Mean","text":"<p>Write a function that takes a numeric array as its right argument and returns the mean (average) of the array.</p>"},{"location":"2016/1/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5 6\n3.5\n     (your_function) \u236c           \u235d the average of an empty vector is 0 \n0\n     (your_function) 17          \u235d your solution should work with a scalar argument\n17 \n     (your_function) 5 3\u2374\u237315     \u235d and average the columns of a matrix\n7 8 9\n     (your_function) 3 3 3\u2374\u237315   \u235d or the matrices of a 3D array etc.\n5 6  7\n8 9 10\n6 7  8\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/1/#solutions","title":"Solutions","text":"17:48 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/10/","title":"2016-10: Order Total","text":"<p>Suppose you have a numeric vector that is the list of prices for a set of retail products. You also have a numeric vector that is the number ordered of each product. Write a function that takes as its right argument a vector of prices and as its left argument a numeric vector that indicates the number ordered and returns the total cost for the order. In case you hadn't realized it, this is an application the dot product. The dot product of two vectors A = [A1, A2, \u2026,An] and B = [B1, B2, \u2026,Bn] is defined as</p> <p> </p>"},{"location":"2016/10/#examples","title":"Examples:","text":"<pre><code>      5 0 2 (your_function) 2.99 4.99 1.99\n18.93\n      0 0 0 (your_function) 2.99 4.99 1.99\n0 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/10/#solutions","title":"Solutions","text":"6:43 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/2/","title":"2016-2: Statistics - Median","text":"<p>Write a function that takes a numeric vector as its right argument and returns the median of the array. The median is the number separating the higher half of the vector from the lower half. The median can be found by arranging all the observations from lowest value to highest value and picking the middle one. If there is an even number of observations, then there is no single middle value; the median is then defined to be the mean of the two middle values.</p>"},{"location":"2016/2/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5 6 7 8 9 \n5\n     (your_function) 1 8 2 7 3 6 4 5\n4.5\n     (your_function) \u236c\n0\n     (your_function) ,7 \n7\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/2/#solutions","title":"Solutions","text":"23:22 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/3/","title":"2016-3: Statistics - Mode","text":"<p>Write a function that takes a numeric vector or scalar as its right argument and returns the mode (that is, the most common value) of the array. If more than one number occurs the greatest number of times, return all such numbers.</p>"},{"location":"2016/3/#examples","title":"Examples:","text":"<pre><code>     (your_function) 2 1 4 3 2 5 1 2\n2\n     (your_function) \u236c   \u235d should return an empty vector       \n\n     (your_function) 1 2 3 4 1 2\n1 2 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/3/#solutions","title":"Solutions","text":"26:36 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/4/","title":"2016-4: Just Meshing Around","text":"<p>Write a function that takes vectors as its left and right arguments and returns them \u201cmeshed\u201d into a single vector formed by alternately taking successive elements from each argument. The arguments do not have to be the same length. </p>"},{"location":"2016/4/#examples","title":"Examples:","text":"<pre><code>      'MENS' (your_function) 'EKES' \nMEEKNESS\n      'Dyalog' (your_function) 'APL'   \nDAyPaLlog\n      'APL' (your_function) 'Dyalog' \nADPyLalog\n       1 3 5 7 (your_function) 2 4 6 8   \u235d should work with numeric vectors \n1 2 3 4 5 6 7 8\n       '' (your_function) 'Hello'  \u235d either or both arguments could be empty\nHello\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/4/#solutions","title":"Solutions","text":"12:07 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/5/","title":"2016-5: You're Unique, Just Like Everyone Else","text":"<p>Write a function that takes a vector as its right argument and returns elements that occur only once in the vector.</p>"},{"location":"2016/5/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5\n1 2 3 4 5\n     (your_function) 1 2 3 4 5 4 3 2 1 \n5\n     (your_function) 'hello world' \nhe wrd\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/5/#solutions","title":"Solutions","text":"13:36 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/6/","title":"2016-6: Shorter Ones to the Front","text":"<p>Write a function that takes a vector of vectors as its right argument and returns it sorted by the length of each element. An element of the vector can be scalar or an empty vector. </p>"},{"location":"2016/6/#examples","title":"Examples:","text":"<pre><code>     (your_function) 'one' 'two' 'three' 'four' 'five' 'six'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502one\u2502two\u2502six\u2502four\u2502five\u2502three\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n     (your_function) (2 4 3) (4 5) 1 (7 3)\n\u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25024 5\u25027 3\u25022 4 3\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n     (your_function) \u236c   \u235d should return an empty vector      \n\n     (your_function) 'one' 2 'three' '' 'four' (5 6 7 8)\n\u250c\u252c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u25022\u2502one\u2502four\u25025 6 7 8\u2502three\u2502\n\u2514\u2534\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/6/#solutions","title":"Solutions","text":"4:19 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/7/","title":"2016-7: 3s and 5s","text":"<p>Write a function that takes a numeric vector and returns all elements that are divisible by 3 or 5.</p>"},{"location":"2016/7/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5 6 7 8 9 10\n3 5 6 9 10\n     (your_function) \u236c   \u235d should return an empty vector\n\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/7/#solutions","title":"Solutions","text":"6:28 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/8/","title":"2016-8: Separating Out the Negative","text":"<p>Write a function that takes a numeric vector and returns a two element vector whose first element contains the values less than 0 (zero) in the vector and the second element contains all values greater than or equal to 0. </p>"},{"location":"2016/8/#examples","title":"Examples:","text":"<pre><code>     (your_function) 0 1 \u00af2 3 \u00af4 \u00af5 6 7 8 \u00af9 10 \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u00af2 \u00af4 \u00af5 \u00af9\u25020 1 3 6 7 8 10\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     (your_function) 1 2 3 4 5\n\u250c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u25021 2 3 4 5\u2502\n\u2514\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     (your_function) \u236c   \u235d should return a vector of two empty vectors \n\u250c\u252c\u2510\n\u2502\u2502\u2502\n\u2514\u2534\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/8/#solutions","title":"Solutions","text":"7:16 <p>Chat transcript Code on GitHub</p>"},{"location":"2016/9/","title":"2016-9: Delimited Text","text":"<p>It's common to encounter delimited text \u2013 for example, comma- separated values in a file.</p> <p>Write a function that takes a character vector as its right argument and one or more characters as its left argument, where those characters are delimiters in the right argument. The function should return the delimited text as a vector of vectors.</p>"},{"location":"2016/9/#examples","title":"Examples:","text":"<pre><code>      ',' (your_function) 'comma,delimited,values' \n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502comma\u2502delimited\u2502values\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      ' ' (your_function) 'break up words'\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502break\u2502up\u2502words\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      ',' (your_function) ',' \n\u250c\u252c\u2510\n\u2502\u2502\u2502\n\u2514\u2534\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2016/9/#solutions","title":"Solutions","text":"6:51 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/1/","title":"2017-1: What an Odd Bunch","text":"<p>Write a function that will return the first n odd natural numbers.</p>"},{"location":"2017/1/#examples","title":"Examples:","text":"<pre><code>     (your_function) 5\n1 3 5 7 9\n     (your_function) 1\n1     \n     (your_function) 0 \u235d should return an empty vector\n\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/1/#solutions","title":"Solutions","text":"3:10 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/10/","title":"2017-10: Squaring Off","text":"<p>Write a function that will reshape a given array into the smallest square matrix that will contain all the elements of the argument, padding with additional elements if necessary. The pad element should be <code>0</code> if the array is numeric and space <code>' '</code> if the array is character.</p>"},{"location":"2017/10/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4\n1 2 \n3 4\n     (your_function) 1 2 3 4 5\n1 2 3 \n4 5 0 \n0 0 0\n     (your_function) 'Dyalog APL'       \u235d should work with any data\nDyal  \nog A  \nPL     \n      ' '=your_function 'Dyalog APL'   \u235d show where the spaces are\n0 0 0 0\n0 0 1 0\n0 0 1 1 \n1 1 1 1  \n     (your_function) 100  \u235d should return a 1\u00d71 matrix \n100\n     (your_function) \u236c    \u235d should return a 0\u00d70 matrix\n\n      \u2374your_function \u236c   \u235d should return a 0\u00d70 matrix\n0 0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/10/#solutions","title":"Solutions","text":"5:38 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/2/","title":"2017-2: Good Evening","text":"<p>Write a function that takes an integer array and replaces all the odd numbers with the next greater even number.</p>"},{"location":"2017/2/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1 2 3 4 5\n2 2 4 4 6       \n     (your_function) \u236c \u235d should return an empty vector      \n\n     (your_function) 4 4\u2374\u237316 \u235d should work with arrays of any rank  \n 2  2  4  4\n 6  6  8  8\n10 10 12 12\n14 14 16 16\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/2/#solutions","title":"Solutions","text":"4:56 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/3/","title":"2017-3: Miss Quoted","text":"<p>Write a function that will remove text found between pairs of double quotes (<code>\"</code>).</p> <p>\ud83d\udca1 Hint: One technique is to use <code>\u2260\\</code>, but there are many ways to solve this problem.</p>"},{"location":"2017/3/#examples","title":"Examples:","text":"<pre><code>     (your_function) 'this \"is\" a test'\nthis \"\" a test\n     (your_function) 'this is a test'\nthis is a test\n     (your_function) 'this \"is\" a \"test\"'\nthis \"\" a \"\"\n     (your_function) ''  \u235d should return an empty vector\n\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/3/#solutions","title":"Solutions","text":"17:04 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/4/","title":"2017-4: Slice(s) of Pie(s)","text":"<p>Write a function that calculates and returns the areas of 0 or more pie slices. The left argument is 0 or more angles (in degrees). The right argument is 0 or more pie diameters. If the number of angles and diameters are not equal to each other (and neither is a single number), a <code>LENGTH ERROR</code> should be generated. </p> <p>\ud83d\udca1 Hint: If you use APL properly, you should not have to check for the length of either argument \u2013 it will just work.</p>"},{"location":"2017/4/#examples","title":"Examples:","text":"<pre><code>      60 (your_function) 12 \n18.84955592 \n      0 (your_function) 12  \u235d 0 degree slice\n0\n      60 (your_function) 0  \u235d 0 diameter pie\n0\n      60 (your_function) 9 12 15  \u235d 60 degree slices of 3 different pies\n10.60287521 18.84955592 29.45243113 \n      60 90 120 (your_function) 12 \u235d 3 different size slices of the same pie \n18.84955592 28.27433388 37.69911184\n      60 90 120 (your_function) 9 12 15 \u235d different sizes of different pies\n10.60287521 28.27433388 58.90486225 \n      60 90 120 (your_function) 9 12 \u235d 3 slices, 2 pies? \nLENGTH ERROR\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/4/#solutions","title":"Solutions","text":"12:35 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/5/","title":"2017-5: DNA?","text":"<p>Write a function that takes a string representing a nucleotide and returns a <code>1</code> if it is a valid DNA string, <code>0</code> otherwise. In other words, are all the characters in the string in the set <code>'ACGT'</code>?</p>"},{"location":"2017/5/#examples","title":"Examples:","text":"<pre><code>     (your_function) 'ATGCTTCAGAAAGGTCTTACG'\n1\n     (your_function) 'Dyalog'\n0\n     (your_function) ''       \u235d an empty string is valid\n1\n     (your_function) 'T'      \n1  \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/5/#solutions","title":"Solutions","text":"3:54 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/6/","title":"2017-6: k-mers","text":"<p>The term k-mer typically refers to all the possible substrings of length k that are contained in a string. In computational genomics, k-mers refer to all the possible subsequences (of length k) from a read obtained through DNA Sequencing. Write a function that takes a character vector as its right argument and k (the substring length) as its left argument and returns a vector of the k-mers of the original string.</p>"},{"location":"2017/6/#examples","title":"Examples:","text":"<pre><code>      4 (your_function) 'ATCGAAGGTCGT'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502ATCG\u2502TCGA\u2502CGAA\u2502GAAG\u2502AAGG\u2502AGGT\u2502GGTC\u2502GTCG\u2502TCGT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n      4 (your_function) 'AC'    \u235d  k&gt;string length? Return an empty vector\n\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/6/#solutions","title":"Solutions","text":"8:54 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/7/","title":"2017-7: Counting DNA Nucleotides","text":"<p>Write a function that takes a character vector representing a DNA string and returns 4 integers of the number of occurrences for each of the symbols 'A', 'C', 'G', and 'T' respectively.</p>"},{"location":"2017/7/#examples","title":"Examples:","text":"<pre><code>     (your_function) 'AGCTTTTCATTCTGACTGCTGTCTTTAAAAAAAGAGTGTCTGATAGCAG' \n14 8 10 17\n     (your_function) 'CCAAATGGGG'\n3 2 4 1\n     (your_function) ''\n0 0 0 0\n     (your_function) ,'G'\n0 0 1 0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/7/#solutions","title":"Solutions","text":"6:53 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/8/","title":"2017-8: Be the First 1","text":"<p>Write a function that takes a Boolean vector or scalar and \u201cturns off\u201d all the 1s after the first 1.</p>"},{"location":"2017/8/#examples","title":"Examples:","text":"<pre><code>     (your_function) 0 1 0 1 0 0 1\n0 1 0 0 0 0 0\n     (your_function) \u236c \u235d should return an empty vector      \n\n     (your_function) 0 0 0 0 \u235d no 1's?  no problem!\n0 0 0 0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/8/#solutions","title":"Solutions","text":"14:10 <p>Chat transcript Code on GitHub</p>"},{"location":"2017/9/","title":"2017-9: Double Trouble","text":"<p>Write a function that takes a character vector or scalar and returns a Boolean vector indicating anywhere an element is followed by an element of the same value.</p>"},{"location":"2017/9/#examples","title":"Examples:","text":"<pre><code>     (your_function) 'bookkeeper'\n0 1 0 1 0 1 0 0 0 0  \n     (your_function) ''  \u235d should return an empty vector      \n\n     (your_function) 'aaaaaa'\n1 1 1 1 1 0\n     (your_function) 'd'\n0 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2017/9/#solutions","title":"Solutions","text":"10:35 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/1/","title":"2018-1: Oh Say Can You See?","text":"<p>Imagine standing in front of a line of skyscrapers of varying heights.  Assume that you can always see a skyscraper that is taller than a closer skyscraper. For example, a person on the left of the diagram below can see 3 skyscrapers \u2013 the first, fourth, and sixth from left to right. In contrast, a person on the right can see 2 skyscrapers \u2013 the seventh and sixth. </p> <pre>\n                                        \u250c\u2500\u2500\u2500\u2510        \n                                        \u2502   \u2502\n                                        \u2502   \u2502\n                                        \u2502   \u2502\n                                        \u2502   \u2502\n                          \u250c\u2500\u2500\u2500\u2510         \u2502   \u2502  \u250c\u2500\u2500\u2500\u2510\n                          \u2502   \u2502         \u2502   \u2502  \u2502   \u2502       \n                          \u2502   \u2502         \u2502   \u2502  \u2502   \u2502 \n                          \u2502   \u2502         \u2502   \u2502  \u2502   \u2502  \n                          \u2502   \u2502         \u2502   \u2502  \u2502   \u2502\n     \u250c\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2510         \u2502   \u2502         \u2502   \u2502  \u2502   \u2502 \n     \u2502   \u2502  \u2502   \u2502         \u2502   \u2502         \u2502   \u2502  \u2502   \u2502 \n     \u2502   \u2502  \u2502   \u2502         \u2502   \u2502  \u250c\u2500\u2500\u2500\u2510  \u2502   \u2502  \u2502   \u2502\n     \u2502   \u2502  \u2502   \u2502  \u250c\u2500\u2500\u2500\u2510  \u2502   \u2502  \u2502   \u2502  \u2502   \u2502  \u2502   \u2502\n     \u2502   \u2502  \u2502   \u2502  \u2502   \u2502  \u2502   \u2502  \u2502   \u2502  \u2502   \u2502  \u2502   \u2502 \n     \u2502 5 \u2502  \u2502 5 \u2502  \u2502 2 \u2502  \u2502 10 \u2502  \u2502 3 \u2502  \u2502 15 \u2502  \u2502 10 \u2502 \n    \u2500\u2518   \u2514\u2500\u2500\u2518   \u2514\u2500\u2500\u2518   \u2514\u2500\u2500\u2518   \u2514\u2500\u2500\u2518   \u2514\u2500\u2500\u2518   \u2514\u2500\u2500\u2518   \u2514\u2500\n</pre> <p>Write a function that, given a scalar or vector of skyscraper heights from closest to furthest, will return an integer representing the number of skyscrapers that can be seen.</p>"},{"location":"2018/1/#examples","title":"Examples:","text":"<pre><code>     (your_function) 5 5 2 10 3 15 10 \u235d from the left person's view\n3\n     (your_function) \u233d 5 5 2 10 3 15 10 \u235d from the right person's view\n2\n     (your_function) \u236c   \u235d no skyscrapers here!\n0\n     (your_function) 10  \u235d single skyscraper\n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/1/#solutions","title":"Solutions","text":"13:48 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/10/","title":"2018-10: Anagrammatically Correct","text":"<p>An anagram is a word or phrase that can be formed by rearranging the letters of another. For instance, 'stained' and 'instead' are anagrams, as are 'emigrants' and 'streaming'. Spaces are not considered significant in the comparison. </p> <p>Write a function that takes left and right arguments of character scalars or vectors returns a <code>1</code> if the arguments are anagrams of one another, <code>0</code> otherwise. You may assume that both arguments are both either upper-case or lower-case.</p>"},{"location":"2018/10/#examples","title":"Examples:","text":"<pre><code>      'ALBERT EINSTEIN' (your_function) 'TEN ELITE BRAINS'\n1\n      '' (your_function) '' \n1\n      'd' (your_function) 'd'\n1\n      'mesas' (your_function) 'seam'\n0\n      'apple' (your_function) 'lapel'\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/10/#solutions","title":"Solutions","text":"3:12 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/2/","title":"2018-2: Number Splitting","text":"<p>Write a function that, given a scalar real non-negative number, will return a two-element vector of the integer and fractional parts   of the number.</p>"},{"location":"2018/2/#examples","title":"Examples:","text":"<pre><code>     (your_function) 1.234\n1 0.234\n     (your_function) 12\n12 0\n     (your_function) .1234\n0 0.1234\n     (your_function) 0\n0 0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/2/#solutions","title":"Solutions","text":"6:16 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/3/","title":"2018-3: Rolling Along","text":"<p>Using the key operator <code>\u2338</code>, write a function that, given an integer scalar or vector representing the number of sides on each of a set of dice, will return a histogram showing the distribution curve for the possible totals that can be rolled using those dice. The histogram is a 2-column matrix where the left column contains the possible totals for the dice, and the right column has vectors containing asterisks representing the number of occurrences of the corresponding totals.  Trailing spaces are allowed in the character vectors.</p> <p>Note: If you have <code>]boxing on</code> then the result will look different.</p>"},{"location":"2018/3/#examples","title":"Examples:","text":"<pre><code>     (your_function) 6 6   \u235d 2 6-sided dice\n 2  *     \n 3  **      \n 4  ***    \n 5  ****      \n 6  *****   \n 7  ****** \n 8  *****   \n 9  ****      \n10  ***    \n11  **\n12  *\n     (your_function) 6  \u235d 1 6-sided die (flat distribution)\n1  *  \n2  *  \n3  *  \n4  *  \n5  *  \n6  * \n     (your_function) 5 3 4 \u235d 5, 3, and 4-sided dice\n 3  *            \n 4  ***          \n 5  ******\n 6  *********     \n 7  ***********  \n 8  ***********  \n 9  *********    \n10  ******\n11  ***          \n12  *\n     (your_function) \u236c \u235d no dice\n0  *   \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/3/#solutions","title":"Solutions","text":"13:03 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/4/","title":"2018-4: What's Your Sign?","text":"<p>The Chinese animal zodiac is a repeating cycle of 12 years, with each year being represented by an animal. 2018 is the year of the dog. The signs for the last 12 years are:</p>   |   |   |   | |- |2018|Dog||2012|Dragon |- |2017|Rooster||2011|Rabbit |- |2016|Monkey||2010|Tiger |- |2015|Goat||2009|Ox |- |2014|Horse||2008|Rat |- |2013|Snake||2007|Pig   <p>Note that the year 1 AD (represented as <code>1</code>) follows the year 1 BC (represented as <code>\u00af1</code>) with no intervening \"0\" year. </p> <p>Write a function that, given a scalar integer year, returns a character vector (string) of the Chinese zodiac sign for that year.  For the purposes of this problem, assume that each year number corresponds to exactly one Chinese zodiac animal.</p>"},{"location":"2018/4/#examples","title":"Examples:","text":"<pre><code>     (your_function) 2018  \u235d Newborns this year will be Dogs\nDog\n     (your_function) 1564  \u235d William Shakespeare b. 1564\nRat\n     (your_function) \u00af551  \u235d Confucius b. 551 BC\nDog\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/4/#solutions","title":"Solutions","text":"13:40 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/5/","title":"2018-5: What's Your Sign? Revisited","text":"<p>In Western astrology, the Zodiac is based on twelve 30\u00b0 sectors of the ecliptic. Although the exact dates in a given year may shift by a day, the general dates for each sign are:</p>   |   |   |   | |- |Aries|March 21\u2013April 19|Libra|September 23\u2013October 22| |- |Taurus|April 20\u2013May 20|Scorpio|October 23\u2013November 21| |- |Gemini|May 21\u2013June 20|Sagittarius|November 22\u2013December 21| |- |Cancer|June 21\u2013July 22|Capricorn|December 22\u2013January 19| |- |Leo|July 23\u2013August 22|Aquarius|January 20\u2013February 18| |- |Virgo|August 23\u2013September 22|Pisces|February 19\u2013March 20|   <p>Write a function that, given a 2-element integer vector representing month and day, returns a character vector (string) of the corresponding Western zodiac sign.</p>"},{"location":"2018/5/#examples","title":"Examples:","text":"<pre><code>     (your_function) 2 23    \u235d February 23\nPisces\n     (your_function) 10 31   \u235d October 31\nScorpio\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/5/#solutions","title":"Solutions","text":"15:18 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/6/","title":"2018-6: What's Your Angle?","text":"<p>XML elements are denoted with content enclosed in beginning and ending tags. The tags themselves are enclosed in left and right angle brackets <code>&lt;</code>  and <code>&gt;</code>. The only valid occurrences of angle brackets are as a part of beginning or ending tags.</p> <p>For example, the following is valid  </p> <pre><code>&lt;name&gt;&lt;first&gt;Drake&lt;/first&gt;&lt;last&gt;Mallard&lt;/last&gt;&lt;/name&gt;\n</code></pre> <p>Whereas the following is not valid XML  </p> <pre><code>&lt;math&gt;&lt;relation&gt;2&lt;3&lt;/relation&gt;&lt;/math&gt;\n</code></pre> <p>One easy validation is to check that the angle brackets are properly balanced \u2013 all left angle brackets <code>&lt;</code> must be \"closed\" with right angle brackets <code>&gt;</code> before another occurrence of a left angle bracket. </p> <p>Write a function that, given a character scalar or vector representing some XML, returns 1 if the angle brackets are properly balanced and 0 if not.</p>"},{"location":"2018/6/#examples","title":"Examples:","text":"<pre><code>     (your_function) '&lt;name&gt;&lt;first&gt;Drake&lt;/first&gt;&lt;last&gt;Mallard&lt;/last&gt;&lt;/name&gt;' \n1\n     (your_function) '&lt;math&gt;&lt;relation&gt;2&lt;3&lt;/relation&gt;&lt;/math&gt;' \n0\n     (your_function) ''   \u235d an empty vector is balanced\n1\n     (your_function) '&gt;stuff&lt;&gt;/stuff&lt;' \n0\n     (your_function) '&lt;' \n0 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/6/#solutions","title":"Solutions","text":"7:09 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/7/","title":"2018-7: Unconditionally Shifty","text":"<p>Logical bitwise shifting is a common operation where bits in a fixed width field are moved to the left or right by a specified amount, <code>N</code>,  causing <code>N</code> bits to be \"shifted out\" at one end and <code>N</code> 0's to be filled in at the other end.</p> <p>For example, shifting the following vector by <code>3</code> <code>1 0 1 1 1 0 1 1</code> would result in <code>0 0 0 1 0 1 1 1</code> and shifting by <code>\u00af3</code> would result in <code>1 1 0 1 1 0 0 0</code> </p> <p>Write a function that given a right argument of a Boolean scalar or vector, and left argument scalar integer of the shift amount, returns an appropriately shifted transformation of the right argument. </p>"},{"location":"2018/7/#examples","title":"Examples:","text":"<pre><code>      3 (your_function) 1 0 1 1 1 0 1 1\n0 0 0 1 0 1 1 1 \n      \u00af3 (your_function) 1 0 1 1 1 0 1 1\n1 1 0 1 1 0 0 0\n      5 (your_function) \u236c   \u235d result is an empty vector      \n\n      0 (your_function) 1 0 1 1 1 0 1 1\n1 0 1 1 1 0 1 1\n      3 (your_function) 1\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/7/#solutions","title":"Solutions","text":"7:45 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/8/","title":"2018-8: Making a Good Argument","text":"<p>Part of Dyalog's help text for dyadic transpose <code>R\u2190X\u2349Y</code> states: - <code>Y</code> may be any array. - <code>X</code> must be a simple scalar or vector whose elements are included in the set <code>\u2373\u2374\u2374Y</code>. - Integer values in <code>X</code> may be repeated but all integers in the set <code>\u2373\u2308/X</code> must be included. - The length of <code>X</code> must equal the rank of <code>Y</code>. </p> <p>Write a function that given a right argument <code>Y</code> of any array and a numeric scalar or vector left argument <code>X</code> returns a Boolean indicating if the left argument is a valid argument for <code>X\u2349Y</code>, like the result of <code>{0::0 \u22c4 1\u22a3\u237a\u2349\u2375}</code> but does not use <code>\u2349</code> (to test the arguments).</p>"},{"location":"2018/8/#examples","title":"Examples:","text":"<pre><code>      3 1 2 (your_function) 2 3 4\u2374\u237324\n1\n      2 1 2 (your_function) 2 3 4\u2374\u237324\n1\n      2 3 2 (your_function) 2 3 4\u2374\u237324\n0\n      1 1 (your_function) 3 4\u2374\u237312\n1\n      1 2 (your_function) 2 3 4\u2374\u237324\n0\n      1.1 2 3 (your_function) 2 3 4\u2374\u237324\n0\n      1 (your_function) \u236c\n1\n      \u236c (your_function) 1\n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/8/#solutions","title":"Solutions","text":"12:41 <p>Chat transcript Code on GitHub</p>"},{"location":"2018/9/","title":"2018-9: Earlier, Later, or the Same?","text":"<p>The system function <code>\u2395TS</code> returns a 7-element integer vector timestamp representing the current year, month, day, hour, minute, second, and millisecond in that order. </p> <p>Write a function that given left and right arguments of such timestamps returns a <code>\u00af1</code>, <code>1</code>, or <code>0</code> if the left argument represents a time that is respectively, earlier than, later than, or simultaneous with the right argument.</p>"},{"location":"2018/9/#examples","title":"Examples:","text":"<pre><code>      2018 4 1 12 34 56 789 (your_function) 2018 4 1 16 45 12 800\n\u00af1\n      2018 4 1 12 34 56 789 (your_function) 2018 4 1 12 34 56 789\n0\n      2018 4 1 12 34 56 789 (your_function) 2017 4 1 12 34 56 789 \n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2018/9/#solutions","title":"Solutions","text":"5:29 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/1/","title":"2019-1: Chunky Monkey","text":"<p>Write a function that, given a scalar or vector as the right argument and a positive (&gt;0) integer chunk size <code>n</code> as the left argument, breaks the array's items up into chunks of size <code>n</code>. If the number of elements in the array is not evenly divisible by <code>n</code>, then the last chunk will have fewer than <code>n</code> elements.</p> <p>\ud83d\udca1 Hint: The partitioned enclose function <code>X\u2282Y</code> could be helpful for this problem.</p>"},{"location":"2019/1/#examples","title":"Examples:","text":"<pre><code>      3 (your_function) \u23739   \u235d ]Box on is used to display the result\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u25024 5 6\u25027 8 9\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      3 (your_function) \u237311\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u25024 5 6\u25027 8 9\u250210 11\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      10 (your_function) 'Dyalog'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Dyalog\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      2 (your_function) 'The' 'cat' 'in' 'the' 'hat' 'sat' 'pat'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502The\u2502cat\u2502\u2502\u2502in\u2502the\u2502\u2502\u2502hat\u2502sat\u2502\u2502\u2502pat\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      5 (your_function) ''   \u235d result is 0-element vector of text vectors\n      4 (your_function) 5\n\u250c\u2500\u2510\n\u25025\u2502\n\u2514\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/1/#solutions","title":"Solutions","text":"5:32 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/10/","title":"2019-10: Odds &amp; Evens","text":"<p>Given a vector of words, separate the words into two vectors \u2013 one containing all the words that have an odd number of letters and the other containing all the words that have an even number of letters.</p> <p>\ud83d\udca1 Hint: You may want to look into the dyadic form of the key operator <code>X f\u2338 Y</code>.</p>"},{"location":"2019/10/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'the' 'plan' 'is' 'great'   \u235d ]box on is used to display theresult\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\u2502\n\u2502\u2502the\u2502great\u2502\u2502\u2502plan\u2502is\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      (your_function) 'all' 'odd' \u235d note the empty 2nd element of the result\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502\u2502\n\u2502\u2502all\u2502odd\u2502\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2518\n      (your_function) 'only' 'even' 'here' \u235d note the empty 1st element of the result\n\u250c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502\u2502only\u2502even\u2502here\u2502\u2502\n\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/10/#solutions","title":"Solutions","text":"15:33 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/2/","title":"2019-2: Making the Grade","text":"Score RangeLetter Grade 0\u201364F 65\u201369D 70\u201379C 80\u201389B 90\u2013100A <p>Write a function that, given an array of integer test scores in the inclusive range 0\u2013100, returns an identically-shaped array of the corresponding letter grades according to the table to the left.</p> <p>\ud83d\udca1 Hint: You may want to investigate the interval index function <code>X\u2378Y</code>.</p>"},{"location":"2019/2/#examples","title":"Examples:","text":"<pre><code>      (your_function) 0 64 65 69 70 79 80 89 90 100\nFFDDCCBBAA\n\n      (your_function) \u236c  \u235d returns an empty vector\n\n\n      (your_function) 2 3\u237471 82 81 82 84 59\nCBB\nBBF\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/2/#solutions","title":"Solutions","text":"3:27 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/3/","title":"2019-3: Grade Distribution","text":"<p>The school's administrative department wants to publish some simple statistics. Given a non-empty character vector of single-letter grades, produce a 3-column, 5-row, alphabetically-sorted matrix of each grade, the number of occurrences of that grade, and the percentage (rounded to 1 decimal position) of the total number of occurrences of that grade. The table should have a row for each grade even if there are no occurrences of a grade. </p> <p>Note: due to rounding the last column might not total 100%.</p> <p>\ud83d\udca1 Hint: The key operator <code>\u2338</code> could be useful for this problem.</p>"},{"location":"2019/3/#examples","title":"Examples:","text":"<pre><code>      (your_function) 9 3 8 4 7/'DABFC'\nA 3  9.7\nB 8 25.8\nC 7 22.6\nD 9 29  \nF 4 12.9\n\n      (your_function) 20\u2374'ABC'\nA 7 35\nB 7 35\nC 6 30\nD 0  0\nF 0  0\n\n      (your_function) ,'B'\nA 0   0\nB 1 100\nC 0   0\nD 0   0\nF 0   0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/3/#solutions","title":"Solutions","text":"9:00 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/4/","title":"2019-4: Knight Moves","text":"1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 2 1 2 2 2 3 2 4 2 5 2 6 2 7 2 8 3 1 3 2 3 3 3 4 3 5 3 6 3 7 3 8 4 1 4 2 4 3 4 4 4 5 4 6 4 7 4 8 5 1 5 2 5 3 5 4 5 5 5 6 5 7 5 8 6 1 6 2 6 3 6 4 6 5 6 6 6 7 6 8 7 1 7 2 7 3 7 4 7 5 7 6 7 7 7 8 8 1 8 2 8 3 8 4 8 5 8 6 8 7 8 8 <p>Consider a chess board as an 8\u00d78 matrix with square <code>(1 1)</code> in the upper left corner and square <code>(8 8)</code> in the lower right corner. For those not familiar with the game of chess, the knight, generally depicted as a horse (\u265e), can move 2 spaces right or left and then 1 space up or down, or 2 spaces up or down and then 1 space right or left. This means that a knight on square <code>(5 4)</code> can move to any of the indicated squares. Given a 2-element vector representing the current square for a knight, return a vector of 2-element vectors representing (in any order) all the squares that the knight can move to.</p> <p>\ud83d\udca1 Hint: The outer product operator <code>\u2218.</code> could be useful for generating the coordinates.</p>"},{"location":"2019/4/#examples","title":"Examples:","text":"<pre><code>      (your_function) 5 4   \u235d ]Box on is used to display the result\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25023 3\u25023 5\u25024 2\u25024 6\u25026 2\u25026 6\u25027 3\u25027 5\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      (your_function) 1 1\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25022 3\u25023 2\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/4/#solutions","title":"Solutions","text":"6:37 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/5/","title":"2019-5: Doubling Up","text":"<p>Given a word or a list of words, return a Boolean vector where <code>1</code> indicates a word with one or more consecutive duplicated, case-sensitive, letters. Each word will have at least one letter and will consist entirely of either uppercase (A\u2013Z) or lowercase (a\u2013z) letters. Words consisting of a single letter can be scalars.</p> <p>\ud83d\udca1 Hint: The nest function <code>\u2286Y</code> could be useful.</p>"},{"location":"2019/5/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'I' 'feed' 'the' 'bookkeeper'\n0 1 0 1\n      (your_function) 'I'\n0\n      (your_function) 'feed'\n1\n      (your_function) 'MY' 'LLAMAS' 'HAVE' 'BEEN' 'GOOD'\n0 1 0 1 1 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/5/#solutions","title":"Solutions","text":"5:01 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/6/","title":"2019-6: Telephone Names","text":"1 2ABC 3DEF 4GHI 5JKL 6MNO 7PQRS 8TUV 9WXYZ * 0 # <p>Some telephone keypads have letters of the alphabet embossed on their keytops. Some people like to remember phone numbers by converting them to an alphanumeric form using one of the letters on the corresponding key. For example, in the keypad shown, <code>'ALSMITH'</code> would correspond to the number 257-6484 and <code>'1DYALOGBEST'</code> would correspond to 1-392-564-2378.</p> <p>Write a function that takes a character vector right argument that consists of digits and uppercase letters and returns an integer vector of the corresponding digits on the keypad.</p> <p>\ud83d\udca1 Hint: Your solution might make use of the membership function <code>X\u220aY</code>.</p>"},{"location":"2019/6/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'IAMYY4U'\n4 2 6 9 9 4 8\n      (your_function) ''   \u235d should return an empty vector\n\n      (your_function) 'UR2CUTE'\n8 7 2 2 8 8 3\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/6/#solutions","title":"Solutions","text":"8:23 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/7/","title":"2019-7: In the Center of It All","text":"<p>Given a right argument of a list of words (or possibly a single word) and a left argument of a width, return a character matrix that has width columns and one row per word, where each word is centered within the row. If width is smaller than the length of a word, truncate the word from the right. If there are an odd number of spaces to center within, leave the extra space on the right.</p> <p>\ud83d\udca1 Hint: The mix <code>\u2191Y</code> and rotate <code>X\u233dY</code> functions will probably be useful here.</p>"},{"location":"2019/7/#examples","title":"Examples:","text":"<pre><code>      10 (your_function) 'APL' 'Problem' 'Solving' 'Competition'\n   APL   \n Problem   \n Solving  \nCompetitio\n      3 (your_function) 0\u2374\u2282''   \u235d result should be 0-row, 3-column matrix      \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/7/#solutions","title":"Solutions","text":"6:56 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/8/","title":"2019-8: Going the Distance","text":"<p> Created by Causeway SVG engine - SharpPlot v3.61.0 Border ===== Region ===== X-Axis Ticks ===== X-Axis Grid X-Axis tickmarks Y-Axis Ticks ===== Y grid Y-Axis tickmarks Axes ===== Arrowhead(s) for the axes Y-axis labels \u00af2 \u00af1 1 2 3 for X-axis labels \u00af2 \u00af1 1 2 Heading, subheading and footnotes ===== Start of Line Chart =========== Points follow ... Line Data value labels ...  A\u2190(\u00af1.5 \u00af1.5) B\u2190(1.5 2.5) C\u2190(1.5 \u00af1.5) Reset to original origin </p> <p>Given a vector of <code>(X Y)</code> points, or a single <code>X Y</code> point, determine the total distance covered when travelling in a straight line from the first point to the next one, and so on until the last point, then returning directly back to the start. For example, given the points <code>(A B C) \u2190 (\u00af1.5 \u00af1.5)(1.5 2.5)(1.5 \u00af1.5)</code>, the distance <code>A</code> to <code>B</code> is <code>5</code>, <code>B</code> to <code>C</code> is <code>4</code> and <code>C</code> back to <code>A</code> is <code>3</code>, for a total of <code>12</code>.</p> <p>\ud83d\udca1 Hint: The rotate <code>X\u233dY</code> and power <code>X*Y</code> functions might be useful.</p>"},{"location":"2019/8/#examples","title":"Examples:","text":"<pre><code>      (your_function) (1 \u00af1)(1 3)   \u235d from A to B and back to A\n8\n      (your_function) (1 1)(1 2)(2 2)(2 1)   \u235d from A to B to C to D to A\n4\n      (your_function) 5 5   \u235d staying where we are\n0\n      (your_function) (1 1)(3 3)   \u235d there and back again\n5.656854249\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/8/#solutions","title":"Solutions","text":"15:47 <p>Chat transcript Code on GitHub</p>"},{"location":"2019/9/","title":"2019-9: Area Code \u00e0 la Gauss","text":"<p>Gauss's area formula, also known as the shoelace formula, is an algorithm to calculate the area of a simple polygon (a polygon that does not intersect itself). It's called the shoelace formula because of a common method using matrices to evaluate it. For example, the area of the triangle described by the vertices <code>(2 4)(3 \u00af8)(1 2)</code> can be calculated by \u201cwalking around\u201d the perimeter back to the first vertex, then drawing diagonals between the columns as shown below. The pattern created by the intersecting diagonals resembles shoelaces, hence the name \u201cshoelace formula\u201d</p> <p>\ud83d\udca1 Hint: You may want to investigate the rotate first <code>X\u2296Y</code> function.</p> First place the vertices in order above each other: 2 4 3 \u00af8 1 2 2 4        Sum the products of the numbers connected by the diagonal lines going down and to the right:<p></p> <pre>      (2\u00d7\u00af8)+(3\u00d72)+(1\u00d74)\n\u00af6\n      </pre> 2 \u2502 4 3 \u2502 \u00af8 1 \u2502 2 2 4        Next sum the products of the numbers connected by the diagonal lines going down and to the left: <p></p> <pre>      (4\u00d73)+(\u00af8\u00d71)+(2\u00d72)\n8\n      </pre> 2 \u2502 4 3 \u2502 \u00af8 1 \u2502 2 2 4        Finally, halve the absolute value of the difference between the two sums:  <p></p> <pre>      0.5 \u00d7 | \u00af6 - 8\n7\n      </pre> 2 \u2502 \u2502 4 3 \u2502 \u2502 \u00af8 1 \u2502 \u2502 2 2 4 <p>Given a vector of <code>(X Y)</code> points, or a single <code>X Y</code> point, return a number indicating the area circumscribed by the points.</p>"},{"location":"2019/9/#examples","title":"Examples:","text":"<pre><code>      (your_function) (2 4)(3 \u00af8)(1 2)\n7\n      (your_function) (1 1)   \u235d a point has no area\n0\n      (your_function) (1 1)(2 2)   \u235d neither does a line\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2019/9/#solutions","title":"Solutions","text":"12:57 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/1/","title":"2020-1: Let's Split!","text":"<p>Write a function that, given a right argument <code>Y</code> which is a scalar or a non-empty vector and a left argument <code>X</code> which is a single non-zero integer so that its absolute value is less or equal to <code>\u2262Y</code>, splits <code>Y</code> into a vector of two vectors according to <code>X</code>, as follows: - If <code>X&gt;0</code>, the first vector contains the first <code>X</code> elements of <code>Y</code> and the second vector contains the remaining elements. - If <code>X&lt;0</code>, the second vector contains the last <code>|X</code> elements of <code>Y</code> and the first vector contains the remaining elements.</p> <p>\ud83d\udca1 Hint: The Take function <code>X\u2191Y</code> might be useful for this problem.</p>"},{"location":"2020/1/#examples","title":"Examples:","text":"<pre><code>      9 (your_function) 'SplittingHairs'   \u235d using ]Boxing on\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Splitting\u2502Hairs\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n      \u00af3 (your_function) 'DyalogAPL'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Dyalog\u2502APL\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n      10 (your_function) \u237310\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2510\n\u25021 2 3 4 5 6 7 8 9 10\u2502\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2518\n\n      1 (your_function) 'works' 'with' 'words' 'also'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502works\u2502\u2502\u2502with\u2502words\u2502also\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/1/#solutions","title":"Solutions","text":"6:11 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/10/","title":"2020-10: Stacking It Up","text":"<p>Write a function that takes as its right argument a vector of simple arrays of rank 2 or less (scalar, vector, or matrix). Each simple array will consist of either non-negative integers or printable ASCII characters. The function must return a simple character array that displays identically to what <code>{\u2395\u2190\u2375}\u00a8</code> displays when applied to the right argument.</p> <p>\ud83d\udca1 Hint: The Mix <code>\u2191Y</code>, Split <code>\u2193Y</code>, and Format <code>\u2355Y</code> functions could be helpful for solving this problem.</p>"},{"location":"2020/10/#examples","title":"Examples:","text":"<p>All results will look identical with <code>]Boxing on</code> as they are simple (non-nested) character arrays.</p> <pre><code>      (your_function) 'Hi' 'Earth'\nHi   \nEarth\n\n      (your_function) (3 3\u2374\u23739)(\u2191'Adam' 'Michael')(\u237310) '*'(5 5\u2374\u237325)\n1 2 3               \n4 5 6               \n7 8 9               \nAdam                \nMichael             \n1 2 3 4 5 6 7 8 9 10\n*                   \n 1  2  3  4  5      \n 6  7  8  9 10      \n11 12 13 14 15      \n16 17 18 19 20      \n21 22 23 24 25\n\n      (your_function) 'O' 'my!'\nO  \nmy!\n\n      (your_function) ,\u2282\u23734\n1 2 3 4\n\n      (your_function) ,'A'\nA\n</code></pre> <code>your_function \u2190 </code> \u2714 Test <p></p>"},{"location":"2020/10/#solutions","title":"Solutions","text":"11:09 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/2/","title":"2020-2: Character Building","text":"<p>UTF-8 encodes Unicode characters using 1-4 integers for each character. Dyalog APL includes a system function, <code>\u2395UCS</code>, that can convert characters into integers and integers into characters. The expression <code>'UTF-8'\u2218\u2395UCS</code> converts between characters and UTF-8.</p> <p>Consider the following:</p> <pre><code>      'UTF-8'\u2218\u2395UCS 'D\u00a5\u237a\u230a\u25cb9'\n68 194 165 226 141 186 226 140 138 226 151 139 57\n      'UTF-8'\u2218\u2395UCS 68 194 165 226 141 186 226 140 138 226 151 139 57\nD\u00a5\u237a\u230a\u25cb9\n</code></pre> <p>How many integers does each character use?</p> <pre><code>      'UTF-8'\u2218\u2395UCS\u00a8 'D\u00a5\u237a\u230a\u25cb9' \u235d using ]Boxing on\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u250268\u2502194 165\u2502226 141 186\u2502226 140 138\u2502226 151 139\u250257\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 \n</code></pre> <p>The rule is that an integer in the range 128 to 191 (inclusive) continues the character of the previous integer (which may itself be a continuation). With that in mind, write a function that, given a right argument which is a simple integer vector representing valid UTF-8 text, encloses each sequence of integers that represent a single character, like the result of <code>'UTF-8'\u2218\u2395UCS\u00a8'UTF-8'\u2218\u2395UCS</code> but does not use any system functions (names beginning with <code>\u2395</code>).</p> <p>\ud83d\udca1 Hint: Use <code>\u2395UCS</code> to verify your solution.</p>"},{"location":"2020/2/#examples","title":"Examples:","text":"<pre><code>      (your_function) 68 194 165 226 141 186 226 140 138 240 159 148 178 57   \u235d using ]Boxing on\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u250268\u2502194 165\u2502226 141 186\u2502226 140 138\u2502240 159 148 178\u250257\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n\n      (your_function) 68 121 97 108 111 103   \u235d 'Dyalog'\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u250268\u2502121\u250297\u2502108\u2502111\u2502103\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n      (your_function) \u236c   \u235d '' (any empty vector result is acceptable here)\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/2/#solutions","title":"Solutions","text":"13:05 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/3/","title":"2020-3: Excel-lent Columns","text":"<p>A Microsoft Excel spreadsheet numbers its rows counting up from 1. However Excel's columns are labelled alphabetically \u2014 beginning with A\u2013Z, then AA\u2013AZ, BA\u2013BZ, up to ZA\u2013ZZ, then AAA\u2013AAZ and so on.</p> <p>Write a function that, given a right argument which is a character scalar or non-empty vector representing a valid character Excel column identifier between A and XFD, returns the corresponding column number.</p> <p>\ud83d\udca1 Hint: The Decode function <code>X\u22a5Y</code>.</p>"},{"location":"2020/3/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'A'\n1\n\n      (your_function) 'APL'\n1104\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/3/#solutions","title":"Solutions","text":"6:19 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/4/","title":"2020-4: Take a Leap","text":"<p>Write a function that, given a right argument which is an integer array of year numbers greater than or equal to 1752 and less than 4000, returns a result of the same shape as the right argument where 1 indicates that the corresponding year is a leap year (0 otherwise).</p> <p>A leap year algorithm can be found here. </p> <p>\ud83d\udca1 Hint: The Residue function <code>X|Y</code> and the Outer Product operator <code>\u2218.</code> could be useful for this problem.</p>"},{"location":"2020/4/#examples","title":"Examples:","text":"<pre><code>      (your_function) 2020\n1\n\n      (your_function) \u236c   \u235d returns an empty vector\n\n      (your_function) 1900+10 10\u2374\u2373100\n0 0 0 1 0 0 0 1 0 0\n0 1 0 0 0 1 0 0 0 1\n0 0 0 1 0 0 0 1 0 0\n0 1 0 0 0 1 0 0 0 1\n0 0 0 1 0 0 0 1 0 0\n0 1 0 0 0 1 0 0 0 1\n0 0 0 1 0 0 0 1 0 0\n0 1 0 0 0 1 0 0 0 1\n0 0 0 1 0 0 0 1 0 0\n0 1 0 0 0 1 0 0 0 1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/4/#solutions","title":"Solutions","text":"11:04 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/5/","title":"2020-5: Stepping in the Proper Direction","text":"<p>Write a function that, given a right argument of 2 integers, returns a vector of the integers from the first element of the right argument to the second, inclusively.</p> <p>\ud83d\udca1 Hint: The Index Generator function <code>\u2373Y</code> function could be useful when solving this problem.</p>"},{"location":"2020/5/#examples","title":"Examples:","text":"<pre><code>      (your_function) 3 10\n3 4 5 6 7 8 9 10\n\n      (your_function) 4 \u00af3\n4 3 2 1 0 \u00af1 \u00af2 \u00af3\n\n      \u2395\u2190r\u2190(your_function) 42 42\n42\n\n      \u2374r   \u235d this is also a vector\n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/5/#solutions","title":"Solutions","text":"11:17 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/6/","title":"2020-6: Move to the Front","text":"<p>Write a function that, given a right argument which is an integer vector and a left argument which is an integer scalar, reorders the right argument so any elements equal to the left argument come first while all other elements keep their order. </p> <p>\ud83d\udca1 Hint: The Grade Up function <code>\u234bY</code> could be helpful for this problem.</p>"},{"location":"2020/6/#examples","title":"Examples:","text":"<pre><code>      3 (your_function) 1 2 3 4 1 3 1 4 5\n3 3 1 2 4 1 1 4 5\n\n      3 (your_function) ,1   \u235d the , makes 1 into a vector\n1\n\n      42 (your_function) \u236c   \u235d empty right argument gives empty result\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/6/#solutions","title":"Solutions","text":"5:04 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/7/","title":"2020-7: See You in a Bit","text":"<p>A common technique for encoding a set of on/off states is to use a value of 2n for the state in position n (origin 0), 1 if the state is \"on\" or 0 for \"off\" and then add the values. Dyalog APL's component file permission codes are an example of this. For example, if you wanted to grant permissions for read (access code 1), append (access code 8) and rename (access code 128) then the resulting code would be 137 because that's 1 + 8 + 128.</p> <p>Write a function that, given a non-negative right argument which is an integer scalar representing the encoded state and a left argument which is an integer scalar representing the encoded state settings that you want to query, returns 1 if all of the codes in the left argument are found in the right argument (0 otherwise).</p> <p>\ud83d\udca1 Hint: The Decode function <code>X\u22a5Y</code> and the derived Inverse operator <code>\u2363\u00af1</code> could be helpful for decoding the states.</p>"},{"location":"2020/7/#examples","title":"Examples:","text":"<pre><code>      2 (your_function) 7   \u235d is 2 in 7 (1+2+4)?\n1\n\n      4 (your_function) 11   \u235d is 4 in 11 (1+2+8)?\n0\n\n      3 (your_function) 11   \u235d is 3 (1+2) in 11 (1+2+8)?\n1\n\n      4 (your_function) 0   \u235d is 4 in 0?\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/7/#solutions","title":"Solutions","text":"7:02 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/8/","title":"APL Quest 2020-8: Zigzag Numbers","text":""},{"location":"2020/8/#2020-8-zigzag-numbers","title":"2020-8: Zigzag Numbers","text":"<p>A zigzag number is an integer in which the difference in magnitude of each pair of consecutive digits alternates from positive to negative or negative to positive.</p> <p>Write a function that takes a single integer greater than or equal to 100 and less than 1015 as its right argument and returns a 1 if the integer is a zigzag number, 0 otherwise. </p> <p>\ud83d\udca1 Hint: Your solution might make use of N-wise Reduction <code>X f/ Y</code>.</p>"},{"location":"2020/8/#examples","title":"Examples:","text":"<pre><code>      (your_function) 123 \n0\n\n      (your_function) 132\n1\n\n      (your_function) 31115\n0\n\n      (your_function) 3141514131415\n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/8/#solutions","title":"Solutions","text":"10:57 <p>Chat transcript Code on GitHub</p>"},{"location":"2020/9/","title":"2020-9: Rise and Fall","text":"<p>Write a function that, given a right argument which is an integer scalar or vector, returns a 1 if the values of the right argument conform to the following pattern (0 otherwise):</p> <ul> <li>The elements increase or stay the same until the \"apex\" (highest value) is reached</li> <li>After the apex, any remaining values decrease or remain the same</li> </ul> <p>\ud83d\udca1 Hint: The Reverse function <code>\u233dY</code> and the Maximum function <code>X\u2308Y</code> combined with N-wise Reduction <code>X f/ Y</code> or Scan <code>f\\ Y</code> can help with solving this problem.</p>"},{"location":"2020/9/#examples","title":"Examples:","text":"<pre><code>      (your_function) 1 3 3 4 5 2 1\n1\n\n      (your_function) 42\n1\n\n      (your_function) 1 3 2 4\n0\n\n      (your_function) 23 23 23 \n1\n\n      (your_function) \u236c  \u235d empty vector\n1\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2020/9/#solutions","title":"Solutions","text":"7:49 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/1/","title":"2021-1: Are You a Bacteria?","text":"<p>A DNA string is composed of the letters 'A','C','G' and 'T'. The GC-content of a DNA string is given by the percentage of the symbols in the string that are either 'C' or 'G'. Very small discrepancies in GC-content can be used to distinguish species; for instance, most bacteria have a GC-content significantly higher than 50%.</p> <p>Write a function that:</p> <ul> <li>has a right argument that is a non-empty character vector representing a DNA string.</li> <li>returns the percentage of GC-content in the string.</li> </ul> <p>\ud83d\udca1 Hint: The membership function X\u220aY could be helpful for this problem.</p>"},{"location":"2021/1/#examples","title":"Examples:","text":"<pre><code>      (your_function) 'GCGCGCGCCCGGGGCCG'\n100\n\n      (your_function) 'ACGTACGTACGTACGT'\n50\n\n      (your_function) 10 12 16 10/'ACGT'\n58.33333333\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/1/#solutions","title":"Solutions","text":"2:31 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/10/","title":"2021-10: On the Right Side","text":"<p>Write a function that:</p> <ul> <li>has a right argument <code>T</code> that is a character scalar, vector or a vector of character vectors/scalars.</li> <li>has a left argument <code>W</code> that is a positive integer specifying the width of the result.</li> <li>returns a right-aligned character array <code>R</code> of shape <code>((2=|\u2261T)/\u2262T),W</code> meaning <code>R</code> is one of the following:<ul> <li>a <code>W</code>-wide vector if <code>T</code> is a simple vector or scalar.</li> <li>a <code>W</code>-wide matrix with the same number rows as elements of <code>T</code> if <code>T</code> is a vector of vectors/scalars.</li> </ul> </li> <li>if an element of <code>T</code> has length greater than <code>W</code>, truncate it after <code>W</code> characters.</li> </ul> <p>\ud83d\udca1 Hint: Your solution might make use of take X \u2191 Y.</p>"},{"location":"2021/10/#examples","title":"Examples:","text":"<p>In these examples, <code>\u2374\u2395\u2190</code> is inserted to display first the result and then its shape.</p> <pre><code>\n      \u2374\u2395\u21906 (your_function) '\u2352'\n     \u2352\n6\n\n      \u2374\u2395\u21908 (your_function) 'K' 'E' 'Iverson'\n       K\n       E\n Iverson\n3 8\n\n      \u2374\u2395\u219010 (your_function) 'Parade' \n    Parade\n10\n\n      \u2374\u2395\u21908 (your_function) 'Longer Phrase' 'APL' 'Parade' \nr Phrase\n     APL\n  Parade\n3 8\n\n      starsForSpaces\u2190'*'@(=\u2218' ')\n      starsForSpaces 6 (your_function) '\u2352'\n*****\u2352\n\n</code></pre> <code>your_function \u2190 </code> \u2714 Test <p></p>"},{"location":"2021/10/#solutions","title":"Solutions","text":"12:25 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/2/","title":"2021-2: Index-Of Modified","text":"<p>Write a function that behaves like the APL index-of function R\u2190X\u2373Y except that it returns <code>0</code> instead of <code>1+\u2262X</code> for elements of <code>Y</code> not found in <code>X</code>.</p>"},{"location":"2021/2/#examples","title":"Examples:","text":"<pre><code>      'DYALOG' (your_function) 'APL'\n3 0 4\n\n      (5 5\u2374\u2395A) (your_function) \u2191'UVWXY' 'FGHIJ' 'XYZZY'\n5 2 0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/2/#solutions","title":"Solutions","text":"6:36 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/3/","title":"2021-3: Multiplicity","text":"<p>Write a function that: - has a right argument <code>Y</code> which is an integer vector or scalar - has a left argument <code>X</code> which is also an integer vector or scalar - finds which elements of <code>Y</code> are multiples of each element of <code>X</code> and returns them as a vector (in the order of <code>X</code>) of vectors (in the order of <code>Y</code>).</p> <p>\ud83d\udca1 Hint: The residue function X|Y and outer product operator X\u2218.fY might be useful for this problem.</p>"},{"location":"2021/3/#examples","title":"Examples:","text":"<pre><code>      \u2395\u2190Y\u219020?20 \u235d your example may be different\n5 7 8 1 12 10 20 16 11 4 2 15 3 18 14 19 13 9 17 6\n\n      2 4 7 3 9 (your_function) Y \u235d using ]Box on\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u25028 12 10 20 16 4 2 18 14 6\u25028 12 20 16 4\u25027 14\u250212 15 3 18 9 6\u250218 9\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n      3 (your_function) \u237310\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25023 6 9\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n      6 7 (your_function) 42\n\u250c\u2500\u2500\u252c\u2500\u2500\u2510\n\u250242\u250242\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2518\n\n      2 3 5 (your_function) \u236c \u235d returns a vector of 3 empty vectors\n\u250c\u252c\u252c\u2510\n\u2502\u2502\u2502\u2502\n\u2514\u2534\u2534\u2518\n\n      \u236c (your_function) \u237310 \u235d returns an empty vector\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/3/#solutions","title":"Solutions","text":"10:00 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/4/","title":"2021-4: Square Peg, Round Hole","text":"<p>Write a function that:</p> <ul> <li>takes a right argument which is an array of positive numbers representing circle diameters</li> <li>returns a numeric array of the same shape as the right argument representing the difference between the areas of the circles and the areas of the largest squares that can be inscribed within each circle</li> </ul> <p>\ud83d\udca1 Hint: The pi times function \u25cbY could be helpful.</p>"},{"location":"2021/4/#examples","title":"Examples:","text":"<pre><code>      (your_function) 2\u00d7\u23735\n1.141592654 4.566370614 10.27433388 18.26548246 28.53981634\n\n      (your_function) (2*.5)\u00d73 3 \u2374\u23739\n 0.5707963268  2.283185307  5.137166941\n 9.132741229  14.26990817  20.54866776 \n27.96902001   36.53096491  46.23450247 \n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/4/#solutions","title":"Solutions","text":"7:39 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/5/","title":"2021-5: Rect-ify","text":"<p>Suppose you have a number of trees that you want to plant in a rectangular pattern with complete rows and columns, meaning all rows have the same number of trees. You also want that rectangular pattern to be as \"square\" as possible, meaning there is a minimal difference between the number of rows and columns in the pattern.</p> <p>Write a function that: - has a right argument N which is a positive integer less than or equal to 1,000,000. - returns a 2-element integer vector <code>R</code> representing the rows and columns of the rectangle such that:     - <code>N=\u00d7/R</code> meaning <code>N</code> equals the number of rows \u00d7 the number of columns (you planted all the trees!)     - <code>\u2264/R</code> meaning the number of rows is less than or equal to the number of columns     - <code>|-/R</code> is minimal, meaning the difference between the elements of <code>R</code> is as small as possible</p>"},{"location":"2021/5/#examples-using-box-on","title":"Examples using ]Box on","text":"<pre><code>      (your_function) 12\n3 4\n\n      (your_function) 16\n4 4\n\n      (your_function) \u00a8\u237319\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u25021 1\u25021 2\u25021 3\u25022 2\u25021 5\u25022 3\u25021 7\u25022 4\u25023 3\u25022 5\u25021 11\u25023 4\u25021 13\u25022 7\u25023 5\u25024 4\u25021 17\u25023 6\u25021 19\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n      (your_function) \u00a8999999 1000000\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502999 1001\u25021000 1000\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/5/#solutions","title":"Solutions","text":"5:02 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/6/","title":"2021-6: Fischer Random Chess","text":"<p>According to Wikipedia, Fischer random chess is a       variation of the game of chess invented by former world chess champion Bobby Fischer. Fischer random chess employs       the same board and pieces as standard chess, but the starting position of the non-pawn pieces on the players' home ranks is       randomized, following certain rules. White's non-pawn pieces are placed on the first rank according to the       following rules:</p> <ul> <li>The Bishops must be placed on opposite-color squares.</li> <li>The King must be placed on a square between the rooks.</li> </ul> <p>The good news is that you don't actually need to know anything about chess to solve this problem! We'll use strings       whose elements are <code>'KQRRBBNN'</code> for the King (\u2654), Queen (\u2655), 2 Rooks (\u2656), 2 Bishops (\u2657), and 2       kNights (\u2658) respectively.</p> <p>Write a function that:</p> <ul> <li>has a character vector right argument that is a permutation of <code>'KQRRBBNN'</code></li> <li>returns 1 if the following are true:<ul> <li>the K is between the two Rs</li> <li>the Bs occupy one odd and one even position</li> </ul>otherwise a 0 is returned.</li> </ul> <p>\ud83d\udca1 Hint: The where function \u2378Y and the residue function X|Y could help with solving this problem.</p>"},{"location":"2021/6/#examples","title":"Examples:","text":"<pre><code>\n      (your_function) 'RNBQKBNR' \u235d standard chess layout\n1\n\n      (your_function) 'BBNRKNRQ' \u235d layout in diagram above\n1\n\n      (your_function) 'RBBNQNRK' \u235d K not between Rs\n0\n\n      (your_function) 'BRBKRNQN' \u235d Bs both in odd positions \n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/6/#solutions","title":"Solutions","text":"3:20 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/7/","title":"2021-7: Can You Feel the Magic?","text":"<p>Wikipedia states that, in recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same.</p> <p>Write a function to test whether an array is a magic square. The function must:</p> <ul> <li>have a right argument that is a square matrix of integers (not necessarily all positive integers)</li> <li>return 1 if the array represents a magic square, otherwise return 0</li> </ul> <p>\ud83d\udca1 Hint: The dyadic transpose X\u2349Y function could be helpful for solving this problem.</p>"},{"location":"2021/7/#examples","title":"Examples:","text":"<pre><code>      (your_function) 1 1\u237442\n1\n\n      (your_function) 3 3\u23744 9 2 3 5 7 8 1 6\n1\n\n      (your_function) 2 2\u23741 2 3 4\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/7/#solutions","title":"Solutions","text":"7:41 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/8/","title":"2021-8: Time to Make a Difference","text":"<p>Write a function that:</p> <ul> <li>has a right argument that is a numeric scalar or vector of length up to 3, representing a number of [[[days] hours] minutes] \u2013 a single number represents minutes, a 2-element vector represents hours and minutes, and a 3-element vector represents days, hours, and minutes.</li> <li>has a similar left argument, although not necessarily the same length as the right argument.</li> <li>returns a single number representing the magnitude of the difference in minutes between the arguments.</li> </ul> <p>\ud83d\udca1 Hint: The functions decode X\u22a5Y and take \u2191  could be useful for this problem.</p>"},{"location":"2021/8/#examples","title":"Examples:","text":"<pre><code>      2 30 (your_function) 5 15\n165\n      5 15 (your_function) 2 30\n165\n      1 0 0 (your_function) 0 \u235d number of minutes in a day\n1440\n      1 0 0 (your_function) \u236c \u235d don't forget to handle empty arguments!\n1440\n      1 0 (your_function) \u00af1 0\n120\n      1.5 0 (your_function) 90\n0\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/8/#solutions","title":"Solutions","text":"2:57 <p>Chat transcript Code on GitHub</p>"},{"location":"2021/9/","title":"2021-9: In the Long Run","text":"<p>Write a function that:</p> <ul> <li>has a right argument that is a numeric vector of 2 or more elements representing daily prices of a stock.</li> <li>returns an integer singleton that represents the highest number of consecutive days where the price increased, decreased, or remained the same, relative to the previous day.</li> </ul> <p>\ud83d\udca1 Hint: The N-wise reduction operator X f/ Y function could be useful when solving this problem.</p>"},{"location":"2021/9/#examples-the-longest-runs-are-highlighted","title":"Examples (the longest runs are highlighted)","text":"<pre>\n      (your_function) 1 2 3 5 5 5 6 4 3\n3\n      (your_function) 1 2 3 4 4 4 4 4 5 4 3\n4\n      (your_function) 1 2\n1\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2021/9/#solutions","title":"Solutions","text":"7:19 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/1/","title":"2022-1: Counting DNA Nucleotides?","text":"<p>This problem was inspired by Counting DNA Nucleotides found on the excellent bioinformatics website rosalind.info.</p> <p>Write a function that:</p> <ul> <li>takes a right argument that is a character vector or scalar representing a DNA string (whose alphabet contains the symbols 'A', 'C', 'G', and 'T').</li> <li>returns a 4-element numeric vector containing the counts of each symbol 'A', 'C', 'G', and 'T' respectively.     </li> </ul> <p> Hint: The key operator f\u2338 or the outer product operator \u2218.g could be helpful.</p>"},{"location":"2022/1/#examples","title":"Examples:","text":"<pre>      \n      (your_function) 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'\n20 12 17 21\n\n      (your_function) ''\n0 0 0 0\n\n      (your_function) 'G'\n0 0 1 0\n\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/1/#solutions","title":"Solutions","text":"4:10 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/10/","title":"2022-10: Separation Anxiety","text":"<p>Write a function that:</p> <p> <ul> <li>takes a right argument that is a character vector or scalar representing a valid non-negative integer.</li> <li>takes a left argument that is a character scalar \"separator\" character.</li> <li>returns a character vector that is a representation of the right argument formatted such that the separator character is found between trailing groups of 3 digits.</li> </ul> </p> <p>Note that the number of digits in the character representation might exceed the number of digits that can be represented as a 32-bit integer. </p> <p> Hint: The at operator @ could be helpful.</p>"},{"location":"2022/10/#examples","title":"Examples:","text":"<pre>\n      ',' (your_function) \u00a8'1' '10' '100' '1000' '10000' '100000' '1000000' '10000000' '100000000' '1000000000' '10000000000'\n\u250c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u250210\u2502100\u25021,000\u250210,000\u2502100,000\u25021,000,000\u250210,000,000\u2502100,000,000\u25021,000,000,000\u250210,000,000,000\u2502\n\u2514\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      '.' (your_function) 60\u2374\u233d\u2395D\n987.654.321.098.765.432.109.876.543.210.987.654.321.098.765.432.109.876.543.210\n\n      '/' (your_function) ,'9' \u235d scalars and 1-element character vectors are equivalent\n9\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/10/#solutions","title":"Solutions","text":"9:17 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/2/","title":"2022-2: Attack of the Mutations!","text":"<p>This problem is inspired by the Counting Point Mutations problem found on the excellent Bioinformatics education website rosalind.info.</p> <p>Write a function that:</p> <ul> <li>takes right and left arguments that are character vectors or scalars of equal length \u2013 these represent DNA strings.</li> <li>returns an integer representing the Hamming distance (the number of differences in corresponding positions) between the arguments.</li> </ul> <p> Hint: The plus function X+Y could be helpful. </p>"},{"location":"2022/2/#examples","title":"Examples:","text":"<pre>\n      'GAGCCTACTAACGGGAT' (your_function) 'CATCGTAATGACGGCCT' \n7\n\n      'A' (your_function) 'T'\n1\n\n      '' (your_function) ''\n0\n\n      (your_function) \u2368 'CATCGTAATGACGGCCT'\n0\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/2/#solutions","title":"Solutions","text":"4:07 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/3/","title":"2022-3: Uniquely Qualified","text":"<p>Write a function that:</p> <p> <ul> <li>takes right and left arguments that are arrays of arbitrary rank, depth, and value.</li> <li>returns a vector of all elements that appear in either of the two argument arrays but not in both. The order of elements in the result is not significant.</li> </ul> </p> <p> Hint: The without function X~Y could be helpful.</p>"},{"location":"2022/3/#examples","title":"Examples:","text":"<pre>\n      'DYALOG' (your_function) 'APL'\nDYOGP\n\n      'DYALOG'  (your_function) \u2282'APL'\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502D\u2502Y\u2502A\u2502L\u2502O\u2502G\u2502APL\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2518\n\n      (2 2\u2374'Hello'(\u2282'World')(2 2\u2374\u23734)42) (your_function) 42 'Have a nice day'\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Hello\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510\u25021 2\u2502Have a nice day\u2502\n\u2502     \u2502\u2502World\u2502\u25023 4\u2502               \u2502\n\u2502     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u2502   \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      1 1 1 (your_function) 2 2\n1 1 1 2 2\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/3/#solutions","title":"Solutions","text":"6:17 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/4/","title":"2022-4: In the Long One...","text":"<p>Write a function that:</p> <ul> <li>takes a right argument that is a Boolean scalar or vector.</li> <li>returns the length of the longest sequence of consecutive 1s.</li> </ul> <p> Hint: The partition function X\u2286fY could be helpful.</p>"},{"location":"2022/4/#examples","title":"Examples:","text":"<pre>\n      (your_function) 1 1 1 0 1 1 0 0 1 1 1 1 0\n4\n\n      (your_function) \u236c\n0\n\n      (your_function) 1\n1\n\n      (your_function) 0\n0\n\n      (your_function) 12/0 1 0 1\n12\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/4/#solutions","title":"Solutions","text":"11:08 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/5/","title":"2022-5: Stairway to Heaven","text":"<p>(with apologies to Led Zeppelin)</p> <p>Write a function that:     <ul> <li>takes a scalar integer argument, n, in the range 0-100.</li> <li>returns a character matrix comprised of spaces and \u2395 that resembles an n-level left-to-right ascending stairway.</li> </ul> </p> <p> Hint: The index generator function \u2373Y could help with solving this     problem. </p>"},{"location":"2022/5/#examples","title":"Examples:","text":"<pre>      \n      (your_function) 10\n         \u2395\n        \u2395\u2395\n       \u2395\u2395\u2395\n      \u2395\u2395\u2395\u2395\n     \u2395\u2395\u2395\u2395\u2395\n    \u2395\u2395\u2395\u2395\u2395\u2395\n   \u2395\u2395\u2395\u2395\u2395\u2395\u2395\n  \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\n \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\n\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\n\n      (your_function) 0 \u235d returns a 0\u00d70 matrix\n\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/5/#solutions","title":"Solutions","text":"21:09 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/6/","title":"2022-6: Pyramid Scheme","text":"<p>Write a monadic function that:</p> <ul> <li>takes an argument n that is an integer scalar in the range 0-100.</li> <li>returns a square matrix \"pyramid\" with 0\u2308\u00af1+2\u00d7n rows and columns of n increasing concentric levels.         By this we mean that the center element of the matrix will be n, surrounded on all sides by n-1.</li> </ul> <p> Hint: The functions minimum X\u230aY and reverse \u233dY, and the outer product operator X\u2218.gY could be helpful.</p>"},{"location":"2022/6/#examples","title":"Examples:","text":"<pre>\n      (your_function) 3\n1 1 1 1 1\n1 2 2 2 1\n1 2 3 2 1\n1 2 2 2 1\n1 1 1 1 1\n\n      (your_function) 5\n1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 2 1\n1 2 3 3 3 3 3 2 1\n1 2 3 4 4 4 3 2 1\n1 2 3 4 5 4 3 2 1\n1 2 3 4 4 4 3 2 1\n1 2 3 3 3 3 3 2 1\n1 2 2 2 2 2 2 2 1\n1 1 1 1 1 1 1 1 1\n\n      (your_function) 1 \u235d should return 1 1\u23741\n1      \n\n      (your_function) 0 \u235d should return 0 0\u23740\n\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/6/#solutions","title":"Solutions","text":"3:14 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/7/","title":"2022-7: Just Golfing Around","text":"<p>Apologies to the code golfers out there, but this problem has nothing to do with     code golf! Instead, it addresses the problem of assigning places in a golf tournament. In regular golf, lower scores place higher \u2013 the lowest score places first and the highest score     places last.</p> <p>Write a function that:</p> <ul> <li>takes a right argument that is a non-decreasing vector or scalar of strictly positive integers, representing a set of scores.</li> <li>returns a numeric vector of the place for each score; for duplicate scores, it returns the average of the places they hold.</li> </ul> <p> Hint: This problem has several viable approaches including using key f\u2338, or partition X\u2286Y,     or interval index X\u2378Y.</p>"},{"location":"2022/7/#examples","title":"Examples:","text":"<pre>\n      (your_function) 1 2 3 4 5\n1 2 3 4 5\n\n      (your_function) 68 71 71 73\n1 2.5 2.5 4\n\n      (your_function) 67 68 68 69 70 70 70 71 72\n1 2.5 2.5 4 6 6 6 8 9\n\n      (your_function) 6\u237470\n3.5 3.5 3.5 3.5 3.5 3.5\n\n      (your_function) \u236c \u235d this should return an empty vector\n\n\n      (your_function) 67 \u235d should work with a scalar argument\n1\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/7/#solutions","title":"Solutions","text":"16:52 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/8/","title":"2022-8: Let's Split!","text":"<p>Write a function that:</p> <ul> <li>takes a right argument that is a non-empty character vector or scalar.</li> <li>takes a left argument that is a non-empty character vector or scalar.</li> <li>returns a 2-element vector of character vectors in which the right argument is split immediately before the first occurence of any element in the left argument. If no left-argument element occurs in the right argument, then the split         should happen after the last element of the right argument.</li> </ul> <p> Hint: The take X\u2191Y and drop X\u2193Y functions, or the partitioned enclose function     X\u2282Y, could be helpful.</p>"},{"location":"2022/8/#examples","title":"Examples:","text":"<pre>\n      'do' (your_function) 'Hello World'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Hell\u2502o World\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      'KEI' (your_function) \u2395A \u235d \u2395A is the system constant that contains the characters A-Z \n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502ABCD\u2502EFGHIJKLMNOPQRSTUVWXYZ\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      (\u233d\u2395A) (your_function) \u2395A\n\u250c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u2502ABCDEFGHIJKLMNOPQRSTUVWXYZ\u2502\n\u2514\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      \u2395D (your_function) \u2395A \u235d \u2395D is the system constant that contains the characters 0-9 \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2510\n\u2502ABCDEFGHIJKLMNOPQRSTUVWXYZ\u2502\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2518\n\n      \u2395D (your_function) 'Q'\n\u250c\u2500\u252c\u2510\n\u2502Q\u2502\u2502\n\u2514\u2500\u2534\u2518\n      \u2395A (your_function) 'Q'\n\u250c\u252c\u2500\u2510\n\u2502\u2502Q\u2502\n\u2514\u2534\u2500\u2518\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/8/#solutions","title":"Solutions","text":"10:08 <p>Chat transcript Code on GitHub</p>"},{"location":"2022/9/","title":"APL Quest 2022-9: An Average Window (or a Windowed Average)","text":""},{"location":"2022/9/#2022-9-an-average-window-or-a-windowed-average","title":"2022-9: An Average Window (or a Windowed Average)","text":"<p>Write a function that:</p> <ul> <li>takes a right argument Y that is a numeric scalar or non-empty vector.</li> <li>takes a left argument X that represents the number of neighboring elements on either side of each element in Y.</li> <li>returns a numeric vector or scalar where each element is the average (mean) of the corresponding element in Y and its X neighbors on either side. If an element has fewer than X neighbors on either side, replicate the first and last values as necessary to make X neighbors.</li> </ul> <p> Hint: The Reduce N-Wise operator Xf/Y could help with solving this     problem. </p>"},{"location":"2022/9/#examples","title":"Examples:","text":"<pre>\n\n      0 (your_function) 1 2 3 4 5 6 \u235d 0 neighbors on each side\n1 2 3 4 5 6\n\n      1 (your_function) 1 2 3 4 5 6 \u235d 1 neighbors on each side\n1.333333333 2 3 4 5 5.666666667\n\n      2 (your_function) 1 2 3 4 5 6 \u235d 2 neighbors on each side\n1.6 2.2 3 4 4.8 5.4\n\n      6 (your_function) 1 2 3 4 5 6\n2.538461538 2.923076923 3.307692308 3.692307692 4.076923077 4.461538462\n\n      10 (your_function) 42\n42    \n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2022/9/#solutions","title":"Solutions","text":"6:29 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/1/","title":"2023-1: Elimination Sort","text":"<p>An \u201cElimination Sort\u201d is a somewhat farcical sorting algorithm which starts with the leftmost element and keeps subsequent elements that are at least as large as the previous kept element, discarding all other elements. For example:</p> <pre>\n      EliminationSort 1 3 7 3 5 8 5 8 1 6 1 8 1 10 8 4 3 4 1 4\n1 3 7 8 8 8 10 \n</pre> <p>Write a function that:</p> <ul> <li>takes a non-empty numeric vector right argument</li> <li>returns an \"Elimination-sorted\" vector of the right argument</li> </ul> <p> Hint: The progressive-maxima idiomatic phrase \u2308\\, the greater or equal function \u2265, and the replicate function / could be helpful in solving this problem.</p>"},{"location":"2023/1/#examples","title":"Examples:","text":"<pre>\n      (your_function) \u237310\n1 2 3 4 5 6 7 8 9 10\n\n      (your_function) 2 1 4 3 6 5 8 7 10 9\n2 4 6 8 10\n\n      (your_function) 1000 2500 1333 1969 3141 2345 3141 4291.9 4291.8 4292\n1000 2500 3141 3141 4291.9 4292\n\n      (your_function) 1 3 7 3 5 8 5 8 1 6 1 8 1 10 8 4 3 4 1 4\n1 3 7 8 8 8 10 \n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/1/#solutions","title":"Solutions","text":"3:56 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/10/","title":"2023-10: Partition with a Twist","text":"<p>Splitting delimited data into sub-arrays using partitioning on a delimiter character (or characters) is a fairly common operation in APL. For instance, if you partition the character vector 'this is an example' on each occurrence of the space character, there would be 4 sub-arrays: 'this' 'is' 'an' 'example'. This problem adds a slight twist to the operation in that the left argument indicates how many sub-arrays to return.</p> <p>Write a function that:</p> <ul> <li>takes a non-negative integer left argument, N</li> <li>takes a space-delimited character vector right argument, string</li> <li>returns an array of length N where:<ul> <li>if N is less than or equal to the number of sub-arrays in string, the first N-1 elements of the result are the first N-1 space-delimited partitions in string. The Nth element of the result is the remaining portion of string.</li> <li>if N is greater than the number of sub-arrays, pad the result with as many empty arrays as necessary to achieve length N.</li> </ul> </li> </ul> <p>Note: Each space in string be considered as a delimiter. This means that leading, trailing, or contiguous spaces are potentially significant.</p> <p> Hint: The partitioned enclose function \u2282 could be helpful in solving this problem.</p>"},{"location":"2023/10/#examples","title":"Examples:","text":"<pre>\n      1 (your_function) 'this is a sample'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502this is a sample\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      2 (your_function) 'this is a sample'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502this\u2502is a sample\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      4 (your_function) 'this is a sample'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502this\u2502is\u2502a\u2502sample\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      \u2374\u00a84 (your_function) 'this is a sample' \u235d each sub-array is a vector\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2510\n\u25024\u25022\u25021\u25026\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518\n\n      13 (your_function) '  this  is  a sample  ' \u235d note the leading, trailing, and multiple interior spaces \n\u250c\u252c\u252c\u2500\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u252c\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u252c\u252c\u252c\u252c\u2510\n\u2502\u2502\u2502this\u2502\u2502is\u2502\u2502a\u2502sample\u2502\u2502\u2502\u2502\u2502\u2502\n\u2514\u2534\u2534\u2500\u2500\u2500\u2500\u2534\u2534\u2500\u2500\u2534\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2534\u2534\u2534\u2518\n\n      0 (your_function) 'this is a sample' \u235d returns an empty vector\n\n\n      4 (your_function) ''\n\u250c\u252c\u252c\u252c\u2510\n\u2502\u2502\u2502\u2502\u2502\n\u2514\u2534\u2534\u2534\u2518\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/10/#solutions","title":"Solutions","text":"10:17 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/2/","title":"2023-2: Put It In Reverse","text":"<p>The find function X\u2377Y identifies the beginnings of occurrences of array X in array Y.</p> <p>In this problem, you're asked to return a result that identifies the endings of occurrences of array X in array Y. To keep things simple, X and Y will be at most rank 1, meaning they'll either be vectors or scalars.</p> <p>Write a function that:</p> <ul> <li>takes a scalar or vector left argument</li> <li>takes a scalar or vector right argument</li> <li>returns a Boolean result that is the same shape as the right argument where 1's mark the ends of occurrences of the left argument in the right argument</li> </ul> <p> Hint: The find function \u2377 and reverse function \u233d could be helpful in solving this problem.</p>"},{"location":"2023/2/#examples","title":"Examples:","text":"<pre>\n      'abra' (your_function) 'abracadabra'\n0 0 0 1 0 0 0 0 0 0 1\n\n      'issi' (your_function) 'Mississippi'\n0 0 0 0 1 0 0 1 0 0 0\n\n      'bb' (your_function) 'bbb bbb'\n0 1 1 0 0 1 1\n</pre> <pre>\n      (,42) (your_function) 42\n0\n\n      42 (your_function) 42\n1\n\n      (,42) (your_function) ,42\n1\n</pre> <pre>\n      'are' 'aquatic' (your_function) 'ducks' 'are' 'aquatic' 'avians' \n0 0 1 0\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/2/#solutions","title":"Solutions","text":"5:58 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/3/","title":"2023-3: Caesar Salad","text":"<p>A Caesar cipher, also known as a shift cipher, is one of the simplest encryption techniques. In a Caesar cipher, each letter in the plaintext is replaced by a letter some fixed number of positions away in the alphabet, effectively \"shifting\" the alphabet.</p> <p>Write a function that:</p> <ul> <li>takes a single integer left argument representing the size of the shift</li> <li>takes a character vector right argument representing the plaintext message</li> <li>returns a result with the same shape as the right argument representing the encrypted message</li> </ul> <p>Notes:<ul> <li>Use ' ',\u2395A as the alphabet</li> <li>You can assume that the plaintext message will contain only characters found in the alphabet.</li> </ul></p> <p> Hint: The rotate function \u233d could be helpful in solving this problem.</p>"},{"location":"2023/3/#examples","title":"Examples:","text":"<pre>\n      4 (your_function) 'HELLO WORLDS'\nLIPPSD SVPHW\n\n      \u00af4 (your_function) 'HELLO WORLDS' \u235d negative shifts are okay\nDAHHKWSKNH O \n\n      0 (your_function) 'HELLO WORLDS' \u235d no shift is okay\nHELLO WORLDS\n\n      27 (your_function) 'HELLO WORLDS'\nHELLO WORLDS\n\n      \u00af10 (your_function) '' \u235d returns an empty vector\n\n    </pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/3/#solutions","title":"Solutions","text":"2:56 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/4/","title":"2023-4: Like a Version","text":"<p>One common software version numbering scheme is known as \"semantic versioning\". Typically, semantic versioning uses three numbers representing a major version number, a minor version number, and a build number.</p> <ul><li>The major version is incremented when a new version of the software introduces changes that would make existing applications using the software fail or behave differently.</li><li>The minor version is incremented when new features are added that didn't previously exist \u2014 no pre-existing use of the software will fail in this case.</li><li>The build number is incremented for bug fixes and similar changes.</li></ul> <p>Write a function that:</p> <ul> <li>takes 3-element integer vector left and right arguments each representing a major version, minor version, and build number.</li> <li>returns<ul> <li><code>\u00af1</code> if the left argument represents a version number older than the right argument</li> <li><code>\u00a00</code> if the left argument represents a version number equal to the right argument</li> <li><code>\u00a01</code> if the left argument represents a version number newer than the right argument</li> </ul> </li> </ul> <p> Hint: The less function &lt; could be helpful in solving this problem.</p>"},{"location":"2023/4/#examples","title":"Examples:","text":"<pre>      \n      1 2 3 (your_function) 1 2 3\n0 \n\n      1 2 3 (your_function) 1 0 9\n1\n\n      14 2 11 (your_function) 14 2 12\n\u00af1\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/4/#solutions","title":"Solutions","text":"9:15 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/5/","title":"2023-5: Risky Business","text":"<p>The board game Risk is a game of world domination where opposing players roll dice to determine the outcome of one player's armies attacking another's. The attacker can roll up to three 6-sided dice and the defender can roll up to two 6-sided dice. The resulting rolls are then individually compared from highest to lowest. If the attacker's die value is greater than the defender's, the defender loses one army. If the defender's die value is greater than or equal to the attacker's, the attacker loses one army. If one player rolls more dice than the other other player, the additional dice are not considered in the evaluation. For this problem, we'll generalize the task by allowing any number of dice for either the attacker or defender, and any integer values in the arguments.</p> <p>Write a function that:</p> <ul> <li>takes a non-empty, descending integer vector left argument representing the attacker's dice rolls</li> <li>takes a non-empty, descending integer vector right argument representing the defender's dice rolls</li> <li>returns a 2-element vector where the first element represents the number of armies the attacker lost and the second element represents the number of armies the defender lost.</li> </ul> <p>Note: The left and right arguments do not need to be the same length.</p> <p> Hint: The less function &lt; could be helpful in solving this problem.</p>"},{"location":"2023/5/#examples","title":"Examples:","text":"<pre>      \n      6 6 4 2 1 (your_function) 6 5 5 \u235d attacker loses 2 armies, defender loses 1 army\n2 1 \n\n      6 (your_function) \u2365, 5 \u235d \u2365, ravels both arguments (making them vectors) before passing them to your function\n0 1\n\n      4 0 \u00af1  (your_function) 3 1 \u00af2\n1 2\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/5/#solutions","title":"Solutions","text":"6:24 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/6/","title":"2023-6: Key/Value Pairs","text":"<p>Representing data as key/value pairs (also known as name/value pairs) is a very common technique. For example, it can be found in query strings in HTTP URIs, attribute settings in HTML elements, and in JSON objects. One common representation for a key/value pair is to have a character key (name) followed by an equals sign (=) followed by the value. Multiple key/value pairs can be separated by a delimiter character or characters. For example:</p> <pre>\n      key1=value1;key2=value2\n</pre> <p>Write a function that:</p> <ul> <li>takes a 2-element character vector left argument where the first element represents the separator character between multiple key/value pairs and the second element represents the separator between the key and the value for each pair.</li> <li>takes a character vector right argument representing a valid set of key/value pairs (delimited as specified by the left argument).</li> <li>returns a 2-column matrix where the first column contains the character vector keys of the key/value pairs and the second column contains the character vector values.</li> </ul> <p>Note: You may assume that there will be no empty names or values in the right argument.</p> <p> Hint: The partition function \u2286 could be helpful in solving this problem.</p>"},{"location":"2023/6/#examples","title":"Examples:","text":"<pre>      \n      \u2374 \u2395\u2190 ' =' (your_function) 'language=APL dialect=Dyalog' \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502language\u2502APL   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502dialect \u2502Dyalog\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n2 2      \n\n      \u2374 \u2395\u2190 ';:' (your_function) 'duck:donald' \n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502duck\u2502donald\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n1 2      \n\n      \u2374 \u2395\u2190 '/:' (your_function) 'name:Morten/name:Brian/name:Ad\u00e1m'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502name\u2502Morten\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502name\u2502Brian \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502name\u2502Ad\u00e1m  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n3 2\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/6/#solutions","title":"Solutions","text":"16:41 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/7/","title":"2023-7: Let's Be Rational","text":"<p>A rational number is a number that can be expressed as the quotient of 2 integers p\u00f7q \u2014 a numerator p and a denominator q. For example, for 1.5, p and q would be 3 and 2, respectively.</p> <p>Write a function that:</p> <ul> <li>takes a single non-zero positive number right argument.</li> <li>returns a 2-element \"integer\" result representing the smallest non-zero positive values for p and q respectively</li> </ul> <p>Notes:</p> <ul> <li>We use \"integer\" in the result description because the result might contain a number larger than can be represented as an integer data type in Dyalog APL. For example, the result when applying the function to \u230a/\u236c would be 1.797693135E308 1 which is represented as a 64-bit floating point array.</li> <li>The test for the correctness of your solution will be that, givenr \u2190 (your_function) ayour solution should satisfy both the following:<ul> <li>r \u2261 \u230a0.5+r</li> <li>a = \u00f7/r</li></ul></li> </ul> <p> Hint: The Lowest Common Multiple function \u2227 or Greatest Common Divisor function \u2228 could be helpful in solving this problem.</p>"},{"location":"2023/7/#examples","title":"Examples:","text":"<pre>\n      (your_function) 1.2\n6 5      \n\n      (your_function) 3.5\n7 2\n\n      (your_function) \u00f73\n1 3\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/7/#solutions","title":"Solutions","text":"4:03 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/8/","title":"2023-8: Critical Thinking","text":"<p>The biorhythm theory is a pseudo-scientific idea that one's life is affected by three rhythmic cycles beginning from one's date of birth. The cycles are: </p> <ul> <li>The Physical cycle, with a periodicity of 23 days, affecting co-ordination, strength, and general well-being</li> <li>The Emotional cycle, with a periodicity of 28 days, affecting creativity, sensitivity, mood, perception, and awareness</li> <li>The Intellectual cycle, with a periodicity of 33 days, affecting alertness, analytical functioning, logical analysis, memory, and communication</li> </ul> <p>\"Critical days\" are days when a cycle crosses the x-axis in either direction and are purported to be accompanied by unstable conditions in the corresponding area. A \"double critical day\" occurs when two of the three cycles cross the x-axis on the same day. Starting from one's birthdate, double critical days occur on multiples of the least common multiple of the half of the periodicities of the two involved cycles. Thus Physical-Emotional, Physical-Intellectual and Emotional-Intellectual double critical days can be calculated respectively using multiples of: </p> <pre><code>      23 23 28\u2227\u2365(\u00f7\u22182)28 33 33\n322 379.5 462\n</code></pre> <p>Fortunately, the dreaded \"triple critical day\", when all three cycles cross the x-axis on the same day, only occurs every <code>(\u2227/23 28 33\u00f72)</code> or 10,626 days (a bit more than 29 years).</p> <p>Write a function that:</p> <ul> <li>takes a 3-element integer left argument representing a valid birthdate</li> <li>takes a 3-element integer right argument representing a valid date occurring on or after the left argument</li> <li>returns a 3-element integer array representing the date of the next double or triple critical day occurring on or after the date represented by the right argument.</li> </ul> <p>Note: All the dates in this specification are to be in the form year month day</p> <p>Hint: The date time system function \u2395DT and residue function | could be helpful in solving this problem.</p>"},{"location":"2023/8/#examples","title":"Examples:","text":"<pre><code>      1962 10 31 (your_function) 2023 1 1\n2023 2 4 \n\n      1961 2 23 (your_function) 1961 2 23 \u235d one's birthdate is a triple critical day\n1961 2 23\n</code></pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/8/#solutions","title":"Solutions","text":"8:22 <p>Chat transcript Code on GitHub</p>"},{"location":"2023/9/","title":"2023-9: Flipping Pairs","text":"<p>This problem has no practical use in the real world (that the author can think of) other than to give your array manipulation muscles some exercise.</p> <p>Write a function that:</p> <ul> <li>takes a non-empty non-scalar array right argument</li> <li>returns an array of the same shape as the argument, but with pairs of elements along the last axis \"flipped\". If the array has an odd number of elements in the last axis, leave the last element unchanged.</li> </ul> <p>Hint: Either the reverse function \u233d used with the partitioned enclose function \u2282, or the grade up function \u234b used with the index function \u2337, could be helpful in solving this problem.</p>"},{"location":"2023/9/#examples","title":"Examples:","text":"<pre>\n      (your_function) \u237310\n2 1 4 3 6 5 8 7 10 9\n\n      (your_function) \u23739\n2 1 4 3 6 5 8 7 9\n\n      (your_function) 4 2\u2374\u23738\n2 1\n4 3\n6 5\n8 7\n\n(your_function) 4 3\u2374\u237312\n 2  1  3\n 5  4  6\n 8  7  9\n11 10 12\n\n      (your_function) 3 3 3\u2374\u237327\n2  1  3\n5  4  6\n8  7  9\n\n11 10 12\n14 13 15\n17 16 18\n\n20 19 21\n23 22 24\n26 25 27\n\n      (your_function) 2 3\u2374'donald' 'duck' 'wrote' 'some' 'good' 'APL'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502duck\u2502donald\u2502wrote\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502good\u2502some  \u2502APL  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <code>your_function \u2190 </code> \u2714 Test"},{"location":"2023/9/#solutions","title":"Solutions","text":"24:47 <p>Chat transcript Code on GitHub</p>"}]}